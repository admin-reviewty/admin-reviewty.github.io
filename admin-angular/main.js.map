{"version":3,"file":"main.js","mappings":"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","sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/guards/anonymous.guard.ts","./src/app/auth/guards/authenticated.guard.ts","./src/app/auth/pages/login/login.component.ts","./src/app/auth/pages/login/login.component.html","./src/app/graphql.module.ts","./src/environments/environment.prod.ts","./src/environments/environment.ts","./src/graphql/graphql.ts","./src/main.ts"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 98255;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AnonymousGuard } from './auth/guards/anonymous.guard';\n\nimport { AuthenticatedGuard } from './auth/guards/authenticated.guard';\nimport { LoginComponent } from './auth/pages/login/login.component';\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent,\n    canActivate: [AnonymousGuard],\n  },\n  {\n    path: '',\n    loadChildren: () =>\n      import('./pages/pages.module').then((m) => m.PagesModule),\n    canLoad: [AuthenticatedGuard],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  constructor(private translateService: TranslateService) {\n    this.translateService.setDefaultLang('vi');\n  }\n\n  ngOnInit(): void {}\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n\n// config angular i18n\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nregisterLocaleData(en);\n\n// config ng-zorro-antd i18n\nimport { NZ_I18N, en_US } from 'ng-zorro-antd/i18n';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { GraphQLModule } from './graphql.module';\nimport { AuthModule } from './auth/auth.module';\n\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    GraphQLModule,\n    HttpClientModule,\n    AuthModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient],\n      },\n    }),\n  ],\n  bootstrap: [AppComponent],\n  providers: [{ provide: NZ_I18N, useValue: en_US }],\n})\nexport class AppModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NzFormModule } from 'ng-zorro-antd/form';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport { NzInputModule } from 'ng-zorro-antd/input';\nimport { NzGridModule } from 'ng-zorro-antd/grid';\nimport { NzCheckboxModule } from 'ng-zorro-antd/checkbox';\nimport { NzAlertModule } from 'ng-zorro-antd/alert';\n\nimport { AuthenticatedGuard } from './guards/authenticated.guard';\nimport { AnonymousGuard } from './guards/anonymous.guard';\nimport { LoginComponent } from './pages/login/login.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NzFormModule,\n    NzButtonModule,\n    NzInputModule,\n    NzGridModule,\n    NzCheckboxModule,\n    NzAlertModule,\n    TranslateModule.forChild(),\n  ],\n  providers: [AuthenticatedGuard, AnonymousGuard],\n})\nexport class AuthModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { MeGQL } from '../../../graphql/graphql';\n\n@Injectable()\nexport class AnonymousGuard implements CanActivate {\n  constructor(private meGQL: MeGQL, private router: Router) {}\n\n  canActivate():\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    return this.meGQL\n      .fetch(\n        {},\n        {\n          errorPolicy: 'all',\n        },\n      )\n      .pipe(\n        map((result) => {\n          if (result.data?.me) {\n            this.router.navigate(['/']);\n            return false;\n          }\n\n          if (result.error || result.errors) {\n            return true;\n          }\n\n          return true;\n        }),\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, CanLoad, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { MeGQL } from '../../../graphql/graphql';\n\n@Injectable()\nexport class AuthenticatedGuard implements CanActivate, CanLoad {\n  constructor(private meGQL: MeGQL, private router: Router) {}\n\n  canActivate():\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    return this.meGQL\n      .fetch(\n        {},\n        {\n          errorPolicy: 'all',\n        },\n      )\n      .pipe(\n        map((result) => {\n          if (result.data?.me) {\n            return true;\n          }\n\n          if (result.error || result.errors) {\n            this.router.navigate(['/login']);\n            return false;\n          }\n\n          return false;\n        }),\n      );\n  }\n\n  canLoad():\n    | boolean\n    | UrlTree\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree> {\n    return this.canActivate();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { GraphQLError } from 'graphql';\nimport { environment } from '../../../../environments/environment';\nimport { LoginGQL } from '../../../../graphql/graphql';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  validateForm!: FormGroup;\n  submitting = false;\n  errors: readonly GraphQLError[] | undefined;\n\n  constructor(\n    private fb: FormBuilder,\n    private loginGQL: LoginGQL,\n    private router: Router,\n  ) {}\n\n  ngOnInit(): void {\n    this.validateForm = this.fb.group({\n      email: [null, [Validators.required]],\n      password: [null, [Validators.required]],\n      remember: [true],\n    });\n  }\n\n  submitForm(): void {\n    Object.values(this.validateForm.controls).forEach((control) => {\n      control.markAsDirty();\n      control.updateValueAndValidity();\n    });\n    if (this.validateForm.invalid) {\n      return;\n    }\n\n    this.submitting = true;\n    if (this.validateForm.valid) {\n      this.loginGQL\n        .mutate(\n          {\n            email: this.validateForm.controls.email.value,\n            password: this.validateForm.controls.password.value,\n          },\n          {\n            errorPolicy: 'all',\n          },\n        )\n        .subscribe(\n          (result) => {\n            this.submitting = false;\n            if (result.data?.login) {\n              localStorage.setItem(\n                environment.tokenKey,\n                result.data.login.token,\n              );\n              this.router.navigateByUrl('/');\n            }\n\n            if (result.errors) {\n              this.errors = result.errors;\n            }\n          },\n          () => {\n            this.submitting = false;\n          },\n        );\n    }\n  }\n}\n","<div class=\"layout-container\">\n  <div class=\"layout-content\">\n    <div class=\"logo-container\">\n      <img src=\"/assets/images/logo.svg\" alt=\"logo\" class=\"logo\" />\n    </div>\n    <nz-alert\n      [nzMessage]=\"'auth.incorrect_email_or_password' | translate\"\n      nzType=\"error\"\n      [nzShowIcon]=\"true\"\n      style=\"margin-bottom: 24px\"\n      *ngIf=\"!submitting && errors\"\n    ></nz-alert>\n    <form\n      nz-form\n      [formGroup]=\"validateForm\"\n      class=\"login-form\"\n      (ngSubmit)=\"submitForm()\"\n    >\n      <nz-form-item>\n        <nz-form-control nzErrorTip=\"Please input your username!\">\n          <nz-input-group nzPrefixIcon=\"user\">\n            <input\n              type=\"email\"\n              nz-input\n              formControlName=\"email\"\n              placeholder=\"Email\"\n            />\n          </nz-input-group>\n        </nz-form-control>\n      </nz-form-item>\n      <nz-form-item>\n        <nz-form-control nzErrorTip=\"Please input your Password!\">\n          <nz-input-group nzPrefixIcon=\"lock\">\n            <input\n              type=\"password\"\n              nz-input\n              formControlName=\"password\"\n              placeholder=\"Password\"\n            />\n          </nz-input-group>\n        </nz-form-control>\n      </nz-form-item>\n      <div nz-row class=\"login-form-margin\">\n        <div nz-col [nzSpan]=\"12\">\n          <label nz-checkbox formControlName=\"remember\">\n            <span>Remember me</span>\n          </label>\n        </div>\n        <div nz-col [nzSpan]=\"12\">\n          <a class=\"login-form-forgot\">Forgot password</a>\n        </div>\n      </div>\n      <button\n        nz-button\n        class=\"login-form-button login-form-margin\"\n        [nzType]=\"'primary'\"\n        [nzLoading]=\"submitting\"\n      >\n        Log in\n      </button>\n    </form>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { APOLLO_OPTIONS } from 'apollo-angular';\nimport {\n  ApolloClientOptions,\n  ApolloLink,\n  InMemoryCache,\n} from '@apollo/client/core';\nimport { HttpLink } from 'apollo-angular/http';\nimport { HttpHeaders } from '@angular/common/http';\n\nimport { environment } from '../environments/environment';\n\nexport function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\n  const http = httpLink.create({\n    uri: environment.graphqlUri,\n    withCredentials: true,\n  });\n  const middleware = new ApolloLink((operation, forward) => {\n    operation.setContext({\n      headers: new HttpHeaders().set(\n        'Authorization',\n        `Bearer ${localStorage.getItem(environment.tokenKey) || null}`,\n      ),\n    });\n    return forward(operation);\n  });\n\n  const link = middleware.concat(http);\n\n  return {\n    link,\n    cache: new InMemoryCache(),\n  };\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n","export const environment = {\n  production: true,\n  graphqlUri: 'https://api.admin.review-ty.com/graphql',\n  apiUri: 'https://api.admin.review-ty.com/admin-api',\n  tokenKey: 'rvt_tk',\n  videoCategoryId: '7',\n};\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  graphqlUri: 'http://localhost:4000/graphql',\n  apiUri: 'http://localhost:4000/admin-api',\n  tokenKey: 'rvt_tk',\n  videoCategoryId: '7',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n};\n\n\n\nexport enum AccountType {\n  Person = 'PERSON',\n  Organization = 'ORGANIZATION'\n}\n\nexport type Address = {\n  __typename?: 'Address';\n  fullName: Scalars['String'];\n  address: Scalars['String'];\n  ward: Scalars['String'];\n  district: Scalars['String'];\n  province: Scalars['String'];\n  country: Scalars['String'];\n  phoneNumber: Scalars['String'];\n};\n\nexport type Admin = {\n  __typename?: 'Admin';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  phoneNumber: Scalars['String'];\n  role: Scalars['String'];\n  avatar?: Maybe<Image>;\n};\n\nexport type AuthPayload = {\n  __typename?: 'AuthPayload';\n  token: Scalars['String'];\n  user: Admin;\n};\n\nexport type Banner = {\n  __typename?: 'Banner';\n  thumbnailUrl: Scalars['String'];\n  liveStreamId: Scalars['Int'];\n};\n\nexport type BannerInput = {\n  thumbnailUrl: Scalars['String'];\n  liveStreamId: Scalars['Int'];\n};\n\nexport type Barcode = {\n  __typename?: 'Barcode';\n  id: Scalars['Int'];\n  value: Scalars['String'];\n};\n\nexport type BarcodeCreateManyWithoutProductInput = {\n  create: Array<BarcodeCreateWithoutProductInput>;\n};\n\nexport type BarcodeCreateWithoutProductInput = {\n  value: Scalars['String'];\n};\n\nexport type BarcodeOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type BarcodeUpdateManyWithoutProductInput = {\n  create?: Maybe<Array<BarcodeCreateWithoutProductInput>>;\n  set?: Maybe<Array<BarcodeWhereUniqueInput>>;\n};\n\nexport type BarcodeWhereInput = {\n  product?: Maybe<ProductWhereInput>;\n};\n\nexport type BarcodeWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type BarcodesAggregate = {\n  __typename?: 'BarcodesAggregate';\n  count: Scalars['Int'];\n};\n\nexport type BarcodesConnection = {\n  __typename?: 'BarcodesConnection';\n  aggregate: BarcodesAggregate;\n};\n\nexport type BaseOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type BaumannAnswer = {\n  __typename?: 'BaumannAnswer';\n  questionId: Scalars['ID'];\n  value: BaumannOptionValue;\n};\n\nexport type BaumannOptionValue = BooleanBox | StringBox;\n\nexport enum BaumannSkinType {\n  Dspt = 'DSPT',\n  Dsnt = 'DSNT',\n  Dspw = 'DSPW',\n  Dsnw = 'DSNW',\n  Ospt = 'OSPT',\n  Osnt = 'OSNT',\n  Ospw = 'OSPW',\n  Osnw = 'OSNW',\n  Orpt = 'ORPT',\n  Ornt = 'ORNT',\n  Orpw = 'ORPW',\n  Ornw = 'ORNW',\n  Drpt = 'DRPT',\n  Drnt = 'DRNT',\n  Drpw = 'DRPW',\n  Drnw = 'DRNW'\n}\n\nexport type BaumannSkinTypeFilter = {\n  equals?: Maybe<BaumannSkinType>;\n  in?: Maybe<Array<BaumannSkinType>>;\n};\n\nexport type BooleanBox = {\n  __typename?: 'BooleanBox';\n  value: Scalars['Boolean'];\n};\n\nexport type BooleanFilter = {\n  equals?: Maybe<Scalars['Boolean']>;\n  not?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Brand = {\n  __typename?: 'Brand';\n  id: Scalars['Int'];\n  logoUrl: Scalars['String'];\n  status: BrandStatus;\n  coo?: Maybe<Scalars['String']>;\n  /** @deprecated should be removed in the future, just use id instead */\n  uid: Scalars['ID'];\n  fixedLogoUrl?: Maybe<Scalars['String']>;\n  translations: Array<BrandTranslation>;\n  types: Array<BrandType>;\n  isFavouriteBrandOfViewer?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type BrandFixedLogoUrlArgs = {\n  width: FixedSize;\n};\n\n\nexport type BrandTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<BrandTranslationWhereInput>;\n  orderBy?: Maybe<BrandTranslationOrderByInput>;\n};\n\nexport type BrandCreateInput = {\n  logoUrl: Scalars['String'];\n  status?: Maybe<BrandStatus>;\n  coo?: Maybe<Scalars['String']>;\n  types: BrandTypeCreateManyWithoutBrandInput;\n  translations: BrandTranslationCreateManyWithoutBrandInput;\n};\n\nexport type BrandCreateOneWithoutProductInput = {\n  connect: BrandWhereUniqueInput;\n};\n\nexport type BrandOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport enum BrandStatus {\n  Active = 'ACTIVE',\n  Inactive = 'INACTIVE'\n}\n\nexport type BrandTranslation = {\n  __typename?: 'BrandTranslation';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n  isOriginal: Scalars['Boolean'];\n  language: LanguageCode;\n  brand: Brand;\n};\n\nexport type BrandTranslationCreateManyWithoutBrandInput = {\n  create: Array<BrandTranslationCreateWithoutBrandInput>;\n};\n\nexport type BrandTranslationCreateWithoutBrandInput = {\n  name: Scalars['String'];\n  description: Scalars['String'];\n  language: LanguageCode;\n  isOriginal?: Maybe<Scalars['Boolean']>;\n  slug: Scalars['String'];\n};\n\nexport type BrandTranslationOrderByInput = {\n  id?: Maybe<OrderBy>;\n  name?: Maybe<OrderBy>;\n};\n\nexport type BrandTranslationUpdateManyWithoutBrandInput = {\n  create?: Maybe<Array<BrandTranslationCreateWithoutBrandInput>>;\n  set?: Maybe<Array<BrandTranslationUpdateWithoutBrandInput>>;\n};\n\nexport type BrandTranslationUpdateWithoutBrandInput = {\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  language: LanguageCode;\n  isOriginal?: Maybe<Scalars['Boolean']>;\n  slug: Scalars['String'];\n};\n\nexport type BrandTranslationWhereInput = {\n  nameContains?: Maybe<Scalars['String']>;\n  language?: Maybe<LanguageCode>;\n  brand?: Maybe<BrandWhereInput>;\n};\n\nexport type BrandType = {\n  __typename?: 'BrandType';\n  id: Scalars['ID'];\n  value: BrandTypeValue;\n};\n\nexport type BrandTypeCreateManyWithoutBrandInput = {\n  connect: Array<BrandTypeWhereUniqueInput>;\n};\n\nexport type BrandTypeUpdateManyWithoutBrandInput = {\n  set: Array<BrandTypeWhereUniqueInput>;\n};\n\nexport enum BrandTypeValue {\n  DepartmentStore = 'DEPARTMENT_STORE',\n  DrugStore = 'DRUG_STORE',\n  RoadStore = 'ROAD_STORE',\n  OnlineOther = 'ONLINE_OTHER'\n}\n\nexport type BrandTypeWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n  value?: Maybe<BrandTypeValue>;\n};\n\nexport type BrandUpdateInput = {\n  logoUrl: Scalars['String'];\n  status?: Maybe<BrandStatus>;\n  coo?: Maybe<Scalars['String']>;\n  types: BrandTypeUpdateManyWithoutBrandInput;\n  translations: BrandTranslationUpdateManyWithoutBrandInput;\n};\n\nexport type BrandWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  uid?: Maybe<Scalars['ID']>;\n  status?: Maybe<BrandStatus>;\n  translationsSome?: Maybe<BrandTranslationWhereInput>;\n  productsSome?: Maybe<ProductWhereInput>;\n  type?: Maybe<BrandTypeWhereUniqueInput>;\n};\n\nexport type BrandWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type BrandsAggregate = {\n  __typename?: 'BrandsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type BrandsConnection = {\n  __typename?: 'BrandsConnection';\n  aggregate: BrandsAggregate;\n};\n\nexport type CartItem = {\n  __typename?: 'CartItem';\n  id: Scalars['Int'];\n  quantity: Scalars['Int'];\n  note?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  liveStreamProduct: LiveStreamProduct;\n  order?: Maybe<Order>;\n};\n\nexport type CartItemCreateInput = {\n  quantity: Scalars['Int'];\n  note?: Maybe<Scalars['String']>;\n  liveStreamProduct: LiveStreamProductCreateOneWithoutCartItemsInput;\n  order?: Maybe<OrderCreateOneWithoutCartItemInput>;\n};\n\nexport type CartItemCreateManyWithoutOrderInput = {\n  connect: Array<CartItemWhereUniqueInput>;\n};\n\nexport type CartItemOrError = CartItem | OrderError | CommonError;\n\nexport type CartItemOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type CartItemUpdateInput = {\n  quantity?: Maybe<Scalars['Int']>;\n  note?: Maybe<Scalars['String']>;\n  order?: Maybe<OrderUpdateOneWithoutCartItemsInput>;\n};\n\nexport type CartItemUpdateManyWithoutOrderInput = {\n  set: Array<CartItemWhereUniqueInput>;\n};\n\nexport type CartItemWhereInput = {\n  liveStreamProduct?: Maybe<LiveStreamProductWhereInput>;\n  order?: Maybe<OrderWhereInput>;\n  user?: Maybe<UserWhereInput>;\n};\n\nexport type CartItemWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type CartItemsAggregate = {\n  __typename?: 'CartItemsAggregate';\n  count: Scalars['Int'];\n  sum: CartItemsSum;\n};\n\nexport type CartItemsConnection = {\n  __typename?: 'CartItemsConnection';\n  aggregate: CartItemsAggregate;\n};\n\nexport type CartItemsSum = {\n  __typename?: 'CartItemsSum';\n  price: Scalars['Int'];\n};\n\nexport type Cast = {\n  __typename?: 'Cast';\n  /** @deprecated use uid instead */\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  content: Scalars['String'];\n  thumbnailUrl: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  uid: Scalars['ID'];\n  products: Array<Product>;\n  tags: Array<Tag>;\n  savedByViewer: Scalars['Boolean'];\n};\n\n\nexport type CastProductsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductWhereInput>;\n  orderBy?: Maybe<Array<ProductOrderByInput>>;\n};\n\nexport type CastAggregate = {\n  __typename?: 'CastAggregate';\n  count: Scalars['Int'];\n};\n\nexport type CastComment = {\n  __typename?: 'CastComment';\n  id: Scalars['Int'];\n  content: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  user: User;\n};\n\nexport type CastCommentCreateInput = {\n  content: Scalars['String'];\n  cast: CastCreateOneWithoutCommentsInput;\n};\n\nexport type CastCommentOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type CastCommentWhereInput = {\n  cast: CastWhereUniqueInput;\n};\n\nexport type CastCommentsAggregate = {\n  __typename?: 'CastCommentsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type CastCommentsConnection = {\n  __typename?: 'CastCommentsConnection';\n  aggregate: CastCommentsAggregate;\n};\n\nexport type CastConnection = {\n  __typename?: 'CastConnection';\n  aggregate: CastAggregate;\n};\n\nexport type CastCreateOneWithoutCommentsInput = {\n  connect: CastWhereUniqueInput;\n};\n\nexport type CastOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type CastWhereInput = {\n  nameContains?: Maybe<Scalars['String']>;\n};\n\nexport type CastWhereUniqueInput = {\n  id?: Maybe<Scalars['Int']>;\n  uid?: Maybe<Scalars['ID']>;\n};\n\nexport type CategoriesAggregate = {\n  __typename?: 'CategoriesAggregate';\n  count: Scalars['Int'];\n};\n\nexport type CategoriesConnection = {\n  __typename?: 'CategoriesConnection';\n  aggregate: CategoriesAggregate;\n};\n\nexport type Category = {\n  __typename?: 'Category';\n  id: Scalars['Int'];\n  status: CategoryStatus;\n  uid: Scalars['ID'];\n  translations: Array<CategoryTranslation>;\n  parent?: Maybe<Category>;\n  children?: Maybe<Array<Category>>;\n  productRankings?: Maybe<Array<ProductRanking>>;\n  productRankingsConnection: ProductRankingsConnection;\n  activeLogo?: Maybe<Image>;\n  inactiveLogo?: Maybe<Image>;\n};\n\n\nexport type CategoryTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<CategoryTranslationWhereInput>;\n};\n\n\nexport type CategoryChildrenArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<CategoryWhereInput>;\n  orderBy?: Maybe<CategoryOrderByInput>;\n};\n\n\nexport type CategoryProductRankingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductRankingWhereInput>;\n  orderBy?: Maybe<Array<ProductRankingOrderByInput>>;\n};\n\n\nexport type CategoryProductRankingsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductRankingWhereInput>;\n  orderBy?: Maybe<Array<ProductRankingOrderByInput>>;\n};\n\nexport type CategoryCreateInput = {\n  status: CategoryStatus;\n  parent?: Maybe<CategoryCreateOneWithoutChildrenInput>;\n  activeLogo?: Maybe<ImageCreateOneWithoutCategoryInput>;\n  inactiveLogo?: Maybe<ImageCreateOneWithoutCategoryInput>;\n  translations: CategoryTranslationCreateManyWithoutCategoryInput;\n};\n\nexport type CategoryCreateManyWithoutProductInput = {\n  connect: Array<CategoryWhereUniqueInput>;\n};\n\nexport type CategoryCreateOneWithoutChildrenInput = {\n  connect: CategoryWhereUniqueInput;\n};\n\nexport type CategoryOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport enum CategoryStatus {\n  Inactive = 'INACTIVE',\n  Active = 'ACTIVE'\n}\n\nexport type CategoryTranslation = {\n  __typename?: 'CategoryTranslation';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  slug?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  isOriginal: Scalars['Boolean'];\n};\n\nexport type CategoryTranslationCreateManyWithoutCategoryInput = {\n  create: Array<CategoryTranslationCreateWithoutCategoryInput>;\n};\n\nexport type CategoryTranslationCreateWithoutCategoryInput = {\n  name: Scalars['String'];\n  slug?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  isOriginal: Scalars['Boolean'];\n};\n\nexport type CategoryTranslationUpdateManyWithoutCategoryInput = {\n  create?: Maybe<Array<CategoryTranslationCreateWithoutCategoryInput>>;\n  set?: Maybe<Array<CategoryTranslationUpdateWithoutCategoryInput>>;\n};\n\nexport type CategoryTranslationUpdateWithoutCategoryInput = {\n  name: Scalars['String'];\n  slug?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  isOriginal: Scalars['Boolean'];\n  id: Scalars['Int'];\n};\n\nexport type CategoryTranslationWhereInput = {\n  language?: Maybe<LanguageCode>;\n  slug?: Maybe<Scalars['String']>;\n  name?: Maybe<StringFilter>;\n};\n\nexport type CategoryUpdateInput = {\n  status: CategoryStatus;\n  parent?: Maybe<CategoryUpdateOneWithoutChildrenInput>;\n  activeLogo?: Maybe<ImageUpdateOneWithoutCategoryInput>;\n  inactiveLogo?: Maybe<ImageUpdateOneWithoutCategoryInput>;\n  translations?: Maybe<CategoryTranslationUpdateManyWithoutCategoryInput>;\n};\n\nexport type CategoryUpdateManyWithoutProductInput = {\n  set: Array<CategoryWhereUniqueInput>;\n};\n\nexport type CategoryUpdateOneWithoutChildrenInput = {\n  connect: CategoryWhereUniqueInput;\n};\n\nexport type CategoryWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  idNot?: Maybe<Scalars['Int']>;\n  uid?: Maybe<Scalars['ID']>;\n  status?: Maybe<CategoryStatus>;\n  parent?: Maybe<CategoryWhereUniqueInput>;\n  isLeaf?: Maybe<Scalars['Boolean']>;\n  translationsSome?: Maybe<CategoryTranslationWhereInput>;\n};\n\nexport type CategoryWhereUniqueInput = {\n  id?: Maybe<Scalars['Int']>;\n  uid?: Maybe<Scalars['ID']>;\n};\n\nexport type CautionCreateInput = {\n  translations: CautionTranslationCreateManyWithoutCautionInput;\n};\n\nexport type CautionCreateManyWithoutIngredientInput = {\n  connect: Array<CautionWhereUniqueInput>;\n};\n\nexport type CautionTranslationCreateManyWithoutCautionInput = {\n  create: Array<CautionTranslationCreateWithoutCautionInput>;\n};\n\nexport type CautionTranslationCreateWithoutCautionInput = {\n  name: Scalars['String'];\n  description: Scalars['String'];\n  language: LanguageCode;\n};\n\nexport type CautionTranslationUpdateManyWithoutCautionInput = {\n  create?: Maybe<Array<CautionTranslationCreateWithoutCautionInput>>;\n  set?: Maybe<Array<CautionTranslationUpdateWithoutCautionInput>>;\n};\n\nexport type CautionTranslationUpdateWithoutCautionInput = {\n  name: Scalars['String'];\n  description: Scalars['String'];\n  language: LanguageCode;\n  id: Scalars['Int'];\n};\n\nexport type CautionUpdateInput = {\n  symbolUrl?: Maybe<Scalars['String']>;\n  translations: CautionTranslationUpdateManyWithoutCautionInput;\n};\n\nexport type CautionUpdateManyWithoutIngredientInput = {\n  set: Array<CautionWhereUniqueInput>;\n};\n\nexport type CautionWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type Channel = {\n  __typename?: 'Channel';\n  id: Scalars['ID'];\n};\n\nexport enum ChannelCommand {\n  Start = 'START',\n  Stop = 'STOP',\n  Status = 'STATUS'\n}\n\nexport type ChannelError = Error & {\n  __typename?: 'ChannelError';\n  message: Scalars['String'];\n  status: ErrorStatus;\n  id?: Maybe<Scalars['String']>;\n  command: ChannelCommand;\n};\n\nexport type ChannelOrError = Channel | ChannelError | CommonError;\n\nexport type CommonError = Error & {\n  __typename?: 'CommonError';\n  message: Scalars['String'];\n  status: ErrorStatus;\n  code: CommonErrorCode;\n};\n\nexport enum CommonErrorCode {\n  InternalServerError = 'INTERNAL_SERVER_ERROR',\n  Forbidden = 'FORBIDDEN',\n  NotFound = 'NOT_FOUND'\n}\n\nexport enum Currency {\n  Vnd = 'VND'\n}\n\n\nexport type DateTimeFilter = {\n  equals?: Maybe<Scalars['DateTime']>;\n  in?: Maybe<Array<Scalars['DateTime']>>;\n  notIn?: Maybe<Array<Scalars['DateTime']>>;\n  lt?: Maybe<Scalars['DateTime']>;\n  lte?: Maybe<Scalars['DateTime']>;\n  gt?: Maybe<Scalars['DateTime']>;\n  gte?: Maybe<Scalars['DateTime']>;\n  not?: Maybe<Scalars['DateTime']>;\n};\n\nexport type Device = {\n  __typename?: 'Device';\n  id: Scalars['Int'];\n  token: Scalars['String'];\n  deviceType: DeviceType;\n};\n\nexport type DeviceCreateInput = {\n  token: Scalars['String'];\n  deviceType: DeviceType;\n};\n\nexport enum DeviceType {\n  Android = 'ANDROID',\n  Ios = 'IOS'\n}\n\nexport enum EcommerceSite {\n  Lazada = 'LAZADA',\n  Tiki = 'TIKI',\n  Shopee = 'SHOPEE'\n}\n\nexport type Error = {\n  message: Scalars['String'];\n  status: ErrorStatus;\n};\n\nexport enum ErrorStatus {\n  Unauthorized = 'UNAUTHORIZED',\n  Forbidden = 'FORBIDDEN',\n  NotFound = 'NOT_FOUND',\n  InternalServerError = 'INTERNAL_SERVER_ERROR',\n  BadRequest = 'BAD_REQUEST'\n}\n\nexport type Event = {\n  __typename?: 'Event';\n  /** @deprecated use uid instead */\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  condition: Scalars['String'];\n  startedAt: Scalars['DateTime'];\n  endedAt: Scalars['DateTime'];\n  coverUrl: Scalars['String'];\n  content: Scalars['String'];\n  visible: Scalars['Boolean'];\n  type: EventType;\n  reviewDeadline?: Maybe<Scalars['DateTime']>;\n  points?: Maybe<Scalars['Int']>;\n  uid: Scalars['ID'];\n  products: Array<Product>;\n  commentsConnection: EventCommentConnection;\n  tags: Array<Tag>;\n  reminderDates?: Maybe<Array<Scalars['DateTime']>>;\n  minimumNumberOfReviews?: Maybe<Scalars['Int']>;\n  /** @deprecated use maximumNumberOfWinners instead */\n  maximumNumberOfParticipants?: Maybe<Scalars['Int']>;\n  /** @deprecated use numberOfWinner instead */\n  maximumNumberOfWinners?: Maybe<Scalars['Int']>;\n  numberOfWinners?: Maybe<Scalars['Int']>;\n  currentNumberOfWinners: Scalars['Int'];\n  eventToProducts: Array<EventToProduct>;\n  notifications: Array<EventNotification>;\n};\n\n\nexport type EventCommentsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<EventCommentWhereInput>;\n  orderBy?: Maybe<EventCommentOrderByInput>;\n};\n\nexport type EventAggregate = {\n  __typename?: 'EventAggregate';\n  count: Scalars['Int'];\n};\n\nexport type EventComment = {\n  __typename?: 'EventComment';\n  id: Scalars['Int'];\n  content: Scalars['String'];\n  status: EventCommentStatus;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  user: User;\n  event: Event;\n  product?: Maybe<Product>;\n};\n\nexport type EventCommentAggregate = {\n  __typename?: 'EventCommentAggregate';\n  count: Scalars['Int'];\n};\n\nexport type EventCommentConnection = {\n  __typename?: 'EventCommentConnection';\n  aggregate: EventCommentAggregate;\n};\n\nexport type EventCommentCreateInput = {\n  event: EventWhereUniqueInput;\n  content: Scalars['String'];\n  isNewApi?: Maybe<Scalars['Boolean']>;\n  usePoints?: Maybe<Scalars['Boolean']>;\n};\n\nexport type EventCommentOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport enum EventCommentStatus {\n  Created = 'CREATED',\n  Cancelled = 'CANCELLED',\n  Confirmed = 'CONFIRMED'\n}\n\nexport type EventCommentUpdateManyWithoutEventInput = {\n  update: Array<EventCommentUpdateWithoutEventInput>;\n};\n\nexport type EventCommentUpdateWithoutEventInput = {\n  id: Scalars['Int'];\n  product?: Maybe<ProductUpdateOneWithoutEventCommentInput>;\n};\n\nexport type EventCommentWhereInput = {\n  status?: Maybe<EventCommentStatus>;\n  event?: Maybe<EventWhereInput>;\n  user?: Maybe<UserWhereInput>;\n};\n\nexport type EventCommentWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type EventConnection = {\n  __typename?: 'EventConnection';\n  aggregate: EventAggregate;\n};\n\nexport type EventCreateInput = {\n  name: Scalars['String'];\n  condition: Scalars['String'];\n  coverUrl: Scalars['String'];\n  startedAt: Scalars['DateTime'];\n  endedAt: Scalars['DateTime'];\n  content: Scalars['String'];\n  visible?: Maybe<Scalars['Boolean']>;\n  type: EventType;\n  reviewDeadline?: Maybe<Scalars['DateTime']>;\n  eventToProducts?: Maybe<EventToProductCreateManyWithoutEventInput>;\n  tags?: Maybe<TagCreateManyWithoutEventInput>;\n  minimumNumberOfReviews?: Maybe<Scalars['Int']>;\n  reminderDates?: Maybe<Array<Scalars['DateTime']>>;\n  numberOfWinners?: Maybe<Scalars['Int']>;\n  pointValue?: Maybe<Scalars['Int']>;\n};\n\nexport type EventNotification = {\n  __typename?: 'EventNotification';\n  id: Scalars['String'];\n  title: Scalars['String'];\n  content: Scalars['String'];\n  notifiedAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type EventNotificationCreateInput = {\n  title: Scalars['String'];\n  content: Scalars['String'];\n  notifiedAt?: Maybe<Scalars['DateTime']>;\n  event: EventWhereUniqueInput;\n};\n\nexport type EventNotificationUpdateInput = {\n  title: Scalars['String'];\n  content: Scalars['String'];\n  notifiedAt?: Maybe<Scalars['DateTime']>;\n  event: EventWhereUniqueInput;\n};\n\nexport type EventNotificationWhereUniqueInput = {\n  id: Scalars['String'];\n};\n\nexport type EventOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type EventToProduct = {\n  __typename?: 'EventToProduct';\n  quantity?: Maybe<Scalars['Int']>;\n  product: Product;\n  event: Event;\n};\n\nexport type EventToProductCreateManyWithoutEventInput = {\n  create: Array<EventToProductCreateOneWithoutEventInput>;\n};\n\nexport type EventToProductCreateOneWithoutEventInput = {\n  quantity: Scalars['Int'];\n  product: ProductWhereUniqueInput;\n};\n\nexport type EventToProductUpdateManyWithoutEventInput = {\n  create: Array<EventToProductCreateOneWithoutEventInput>;\n};\n\nexport enum EventType {\n  Trial = 'TRIAL',\n  Sale = 'SALE'\n}\n\nexport type EventUpdateInput = {\n  name: Scalars['String'];\n  condition: Scalars['String'];\n  coverUrl?: Maybe<Scalars['String']>;\n  startedAt: Scalars['DateTime'];\n  endedAt: Scalars['DateTime'];\n  content: Scalars['String'];\n  visible?: Maybe<Scalars['Boolean']>;\n  type: EventType;\n  reviewDeadline?: Maybe<Scalars['DateTime']>;\n  eventToProducts?: Maybe<EventToProductUpdateManyWithoutEventInput>;\n  tags?: Maybe<TagUpdateManyWithoutEventInput>;\n  minimumNumberOfReviews?: Maybe<Scalars['Int']>;\n  reminderDates?: Maybe<Array<Scalars['DateTime']>>;\n  numberOfWinners?: Maybe<Scalars['Int']>;\n  pointValue?: Maybe<Scalars['Int']>;\n};\n\nexport type EventWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  nameContains?: Maybe<Scalars['String']>;\n  conditionContains?: Maybe<Scalars['String']>;\n  type?: Maybe<EventType>;\n  isExpired?: Maybe<Scalars['Boolean']>;\n  isVisible?: Maybe<Scalars['Boolean']>;\n  visible?: Maybe<Scalars['Boolean']>;\n  productsSome?: Maybe<ProductWhereInput>;\n};\n\nexport type EventWhereUniqueInput = {\n  id?: Maybe<Scalars['Int']>;\n  uid?: Maybe<Scalars['ID']>;\n};\n\nexport enum EwgRiskType {\n  Low = 'LOW',\n  Medium = 'MEDIUM',\n  High = 'HIGH'\n}\n\nexport type ExternalLink = {\n  __typename?: 'ExternalLink';\n  url: Scalars['String'];\n  affiliateUrl?: Maybe<Scalars['String']>;\n  image?: Maybe<Image>;\n  title: Scalars['String'];\n};\n\nexport type ExternalLinkCreateManyWithoutShopInput = {\n  create: Array<ExternalLinkCreateWithoutShopInput>;\n};\n\nexport type ExternalLinkCreateManyWithoutShopToProductInput = {\n  create: Array<ExternalLinkCreateWithoutShopToProductInput>;\n};\n\nexport type ExternalLinkCreateWithoutShopInput = {\n  url: Scalars['String'];\n  affiliateUrl?: Maybe<Scalars['String']>;\n  image?: Maybe<ImageCreateOneWithoutExternalLinkInput>;\n  title: Scalars['String'];\n};\n\nexport type ExternalLinkCreateWithoutShopToProductInput = {\n  url: Scalars['String'];\n  affiliateUrl?: Maybe<Scalars['String']>;\n  image?: Maybe<ImageCreateOneWithoutExternalLinkInput>;\n  title: Scalars['String'];\n};\n\nexport type ExternalLinkUpdateManyWithoutShopInput = {\n  create: Array<ExternalLinkCreateWithoutShopInput>;\n};\n\nexport type ExternalLinkUpdateManyWithoutShopToProductInput = {\n  create: Array<ExternalLinkCreateWithoutShopToProductInput>;\n};\n\nexport type Feature = {\n  __typename?: 'Feature';\n  video?: Maybe<Scalars['Boolean']>;\n  liveStream?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum FixedSize {\n  Small = 'SMALL',\n  Medium = 'MEDIUM',\n  Large = 'LARGE'\n}\n\nexport type FollowersAggregate = {\n  __typename?: 'FollowersAggregate';\n  count: Scalars['Int'];\n};\n\nexport type FollowersConnection = {\n  __typename?: 'FollowersConnection';\n  aggregate: FollowersAggregate;\n};\n\nexport type FollowingsAggregate = {\n  __typename?: 'FollowingsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type FollowingsConnection = {\n  __typename?: 'FollowingsConnection';\n  aggregate: FollowingsAggregate;\n};\n\nexport type FunctionCreateInput = {\n  type: SpecialIngredientFunctionType;\n  symbolUrl: Scalars['String'];\n  translations: FunctionTranslationCreateManyWithoutFunctionInput;\n};\n\nexport type FunctionCreateManyWithoutIngredientInput = {\n  connect: Array<FunctionWhereUniqueInput>;\n};\n\nexport type FunctionTranslationCreateManyWithoutFunctionInput = {\n  create: Array<FunctionTranslationCreateWithoutFunctionInput>;\n};\n\nexport type FunctionTranslationCreateWithoutFunctionInput = {\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n};\n\nexport type FunctionTranslationUpdateManyWithoutFunctionInput = {\n  create?: Maybe<Array<FunctionTranslationCreateWithoutFunctionInput>>;\n  set?: Maybe<Array<FunctionTranslationUpdateWithoutFunctionInput>>;\n};\n\nexport type FunctionTranslationUpdateWithoutFunctionInput = {\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  id: Scalars['Int'];\n};\n\nexport type FunctionUpdateInput = {\n  type: SpecialIngredientFunctionType;\n  symbolUrl?: Maybe<Scalars['String']>;\n  translations: FunctionTranslationUpdateManyWithoutFunctionInput;\n};\n\nexport type FunctionUpdateManyWithoutIngredientInput = {\n  set: Array<FunctionWhereUniqueInput>;\n};\n\nexport type FunctionWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport enum Gender {\n  Male = 'MALE',\n  Female = 'FEMALE',\n  Other = 'OTHER'\n}\n\nexport type Image = {\n  __typename?: 'Image';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  url: Scalars['String'];\n  width?: Maybe<Scalars['Float']>;\n  height?: Maybe<Scalars['Float']>;\n  createdAt: Scalars['DateTime'];\n  fixed: Image;\n};\n\n\nexport type ImageFixedArgs = {\n  width: FixedSize;\n};\n\nexport type ImageCreateManyWithoutPostCommentInput = {\n  create?: Maybe<Array<ImageCreateWithoutPostCommentInput>>;\n};\n\nexport type ImageCreateManyWithoutPostInput = {\n  create?: Maybe<Array<ImageCreateWithoutPostInput>>;\n};\n\nexport type ImageCreateManyWithoutReviewInput = {\n  create?: Maybe<Array<ImageCreateWithoutReviewInput>>;\n};\n\nexport type ImageCreateOneWithoutCategoryInput = {\n  create?: Maybe<ImageCreateWithoutCategoryInput>;\n};\n\nexport type ImageCreateOneWithoutExternalLinkInput = {\n  create?: Maybe<ImageCreateWithoutExternalLinkInput>;\n};\n\nexport type ImageCreateOneWithoutLiveStreamInput = {\n  create: ImageCreateWithoutLiveStreamInput;\n};\n\nexport type ImageCreateOneWithoutProductInput = {\n  connect?: Maybe<ImageWhereUniqueInput>;\n  create?: Maybe<ImageCreateWithoutProductInput>;\n};\n\nexport type ImageCreateOneWithoutShopInput = {\n  create: ImageCreateWithoutShopInput;\n};\n\nexport type ImageCreateWithoutCategoryInput = {\n  name: Scalars['String'];\n  url: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n};\n\nexport type ImageCreateWithoutExternalLinkInput = {\n  name: Scalars['String'];\n  url: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n};\n\nexport type ImageCreateWithoutLiveStreamInput = {\n  name: Scalars['String'];\n  url: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n};\n\nexport type ImageCreateWithoutPostCommentInput = {\n  name: Scalars['String'];\n  url: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n};\n\nexport type ImageCreateWithoutPostInput = {\n  name: Scalars['String'];\n  url: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n};\n\nexport type ImageCreateWithoutProductInput = {\n  name: Scalars['String'];\n  url: Scalars['String'];\n  width: Scalars['Int'];\n  height: Scalars['Int'];\n};\n\nexport type ImageCreateWithoutReviewInput = {\n  name: Scalars['String'];\n  url: Scalars['String'];\n  width: Scalars['Int'];\n  height: Scalars['Int'];\n};\n\nexport type ImageCreateWithoutShopInput = {\n  name: Scalars['String'];\n  url: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n};\n\nexport type ImageCreateWithoutUserInput = {\n  name: Scalars['String'];\n  url: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n};\n\nexport type ImageOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type ImageUpdateManyWithoutPostCommentInput = {\n  create?: Maybe<Array<ImageCreateWithoutPostCommentInput>>;\n  set?: Maybe<Array<ImageWhereUniqueInput>>;\n  disconnect?: Maybe<Array<ImageWhereUniqueInput>>;\n};\n\nexport type ImageUpdateManyWithoutPostInput = {\n  create?: Maybe<Array<ImageCreateWithoutPostInput>>;\n  set?: Maybe<Array<ImageWhereUniqueInput>>;\n};\n\nexport type ImageUpdateManyWithoutReviewInput = {\n  create?: Maybe<Array<ImageCreateWithoutReviewInput>>;\n  set?: Maybe<Array<ImageWhereUniqueInput>>;\n};\n\nexport type ImageUpdateManyWithoutUserInput = {\n  create?: Maybe<ImageCreateWithoutUserInput>;\n};\n\nexport type ImageUpdateOneWithoutCategoryInput = {\n  create?: Maybe<ImageCreateWithoutCategoryInput>;\n  connect?: Maybe<ImageWhereUniqueInput>;\n  disconnect?: Maybe<ImageWhereUniqueInput>;\n};\n\nexport type ImageUpdateOneWithoutProductInput = {\n  connect?: Maybe<ImageWhereUniqueInput>;\n  create?: Maybe<ImageCreateWithoutProductInput>;\n};\n\nexport type ImageUpdateOneWithoutShopInput = {\n  create: ImageCreateWithoutShopInput;\n};\n\nexport type ImageWhereInput = {\n  review?: Maybe<ReviewWhereInput>;\n};\n\nexport type ImageWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type ImagesAggregate = {\n  __typename?: 'ImagesAggregate';\n  count: Scalars['Int'];\n};\n\nexport type ImagesConnection = {\n  __typename?: 'ImagesConnection';\n  aggregate: ImagesAggregate;\n};\n\nexport type Ingredient = {\n  __typename?: 'Ingredient';\n  id: Scalars['Int'];\n  ewg?: Maybe<Scalars['String']>;\n  /** @deprecated please use description of translations instead */\n  description?: Maybe<Scalars['String']>;\n  attributes?: Maybe<IngredientAttribute>;\n  uid: Scalars['ID'];\n  ewgRiskType?: Maybe<EwgRiskType>;\n  translations: Array<IngredientTranslation>;\n  specialFunctions?: Maybe<Array<SpecialIngredientFunction>>;\n  cautions?: Maybe<Array<IngredientCaution>>;\n};\n\n\nexport type IngredientTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientTranslationWhereInput>;\n  orderBy?: Maybe<IngredientTranslationOrderByInput>;\n};\n\n\nexport type IngredientSpecialFunctionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<SpecialIngredientFunctionWhereInput>;\n  orderBy?: Maybe<SpecialIngredientFunctionOrderByInput>;\n};\n\n\nexport type IngredientCautionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientCautionWhereInput>;\n  orderBy?: Maybe<BaseOrderByInput>;\n};\n\nexport type IngredientAttribute = {\n  __typename?: 'IngredientAttribute';\n  rdi?: Maybe<Scalars['Float']>;\n  rdiUnit?: Maybe<Unit>;\n};\n\nexport type IngredientAttributeCreateNestedOneWithoutIngredientInput = {\n  create: IngredientAttributeCreateWithoutIngredientInput;\n};\n\nexport type IngredientAttributeCreateWithoutIngredientInput = {\n  rdi?: Maybe<Scalars['Float']>;\n  rdiUnit?: Maybe<Unit>;\n};\n\nexport type IngredientCaution = {\n  __typename?: 'IngredientCaution';\n  id: Scalars['Int'];\n  uid: Scalars['ID'];\n  translations: Array<IngredientCautionTranslation>;\n};\n\n\nexport type IngredientCautionTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientCautionTranslationWhereInput>;\n  orderBy?: Maybe<BaseOrderByInput>;\n};\n\nexport type IngredientCautionTranslation = {\n  __typename?: 'IngredientCautionTranslation';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  caution: IngredientCaution;\n};\n\nexport type IngredientCautionTranslationWhereInput = {\n  language?: Maybe<LanguageCode>;\n  nameContains?: Maybe<Scalars['String']>;\n};\n\nexport type IngredientCautionWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  translationsSome?: Maybe<IngredientCautionTranslationWhereInput>;\n  productsSome?: Maybe<ProductWhereInput>;\n};\n\nexport type IngredientCautionsAggregate = {\n  __typename?: 'IngredientCautionsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type IngredientCautionsConnection = {\n  __typename?: 'IngredientCautionsConnection';\n  aggregate: IngredientCautionsAggregate;\n};\n\nexport type IngredientCreateInput = {\n  ewg?: Maybe<Scalars['String']>;\n  translations?: Maybe<IngredientTranslationCreateManyWithoutIngredientInput>;\n  functions?: Maybe<FunctionCreateManyWithoutIngredientInput>;\n  cautions?: Maybe<CautionCreateManyWithoutIngredientInput>;\n  attribute?: Maybe<IngredientAttributeCreateNestedOneWithoutIngredientInput>;\n};\n\nexport type IngredientOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type IngredientSearchResult = {\n  __typename?: 'IngredientSearchResult';\n  total: Scalars['Int'];\n  ingredients: Array<Maybe<Ingredient>>;\n};\n\nexport type IngredientTranslation = {\n  __typename?: 'IngredientTranslation';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  /** @deprecated use description instead */\n  purpose?: Maybe<Scalars['String']>;\n  effect?: Maybe<Scalars['String']>;\n  dose?: Maybe<Scalars['String']>;\n  exceedDose?: Maybe<Scalars['String']>;\n  pregnant?: Maybe<Scalars['String']>;\n  combination?: Maybe<Scalars['String']>;\n  notCombination?: Maybe<Scalars['String']>;\n  notableCase?: Maybe<Scalars['String']>;\n  attention?: Maybe<Scalars['String']>;\n  ingredient: Ingredient;\n};\n\nexport type IngredientTranslationCreateManyWithoutIngredientInput = {\n  create: Array<IngredientTranslationCreateWithoutIngredientInput>;\n};\n\nexport type IngredientTranslationCreateWithoutIngredientInput = {\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  effect?: Maybe<Scalars['String']>;\n  dose?: Maybe<Scalars['String']>;\n  exceedDose?: Maybe<Scalars['String']>;\n  pregnant?: Maybe<Scalars['String']>;\n  combination?: Maybe<Scalars['String']>;\n  notCombination?: Maybe<Scalars['String']>;\n  notableCase?: Maybe<Scalars['String']>;\n  attention?: Maybe<Scalars['String']>;\n};\n\nexport type IngredientTranslationOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type IngredientTranslationUpdateManyWithoutIngredientInput = {\n  create?: Maybe<Array<IngredientTranslationCreateWithoutIngredientInput>>;\n  set?: Maybe<Array<IngredientTranslationUpdateWithoutIngredientInput>>;\n};\n\nexport type IngredientTranslationUpdateWithoutIngredientInput = {\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  effect?: Maybe<Scalars['String']>;\n  dose?: Maybe<Scalars['String']>;\n  exceedDose?: Maybe<Scalars['String']>;\n  pregnant?: Maybe<Scalars['String']>;\n  combination?: Maybe<Scalars['String']>;\n  notCombination?: Maybe<Scalars['String']>;\n  notableCase?: Maybe<Scalars['String']>;\n  attention?: Maybe<Scalars['String']>;\n  id: Scalars['Int'];\n};\n\nexport type IngredientTranslationWhereInput = {\n  language?: Maybe<LanguageCode>;\n  nameContains?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type IngredientUpdateInput = {\n  ewg?: Maybe<Scalars['String']>;\n  translations?: Maybe<IngredientTranslationUpdateManyWithoutIngredientInput>;\n  functions?: Maybe<FunctionUpdateManyWithoutIngredientInput>;\n  cautions?: Maybe<CautionUpdateManyWithoutIngredientInput>;\n  attribute?: Maybe<IngredientAttributeCreateNestedOneWithoutIngredientInput>;\n};\n\nexport type IngredientWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  uid?: Maybe<Scalars['ID']>;\n  ewg?: Maybe<Scalars['String']>;\n  ewgRiskType?: Maybe<EwgRiskType>;\n  productsSome?: Maybe<ProductWhereInput>;\n  cautionsSome?: Maybe<IngredientCautionWhereInput>;\n  translationsSome?: Maybe<IngredientTranslationWhereInput>;\n  functionsSome?: Maybe<SpecialIngredientFunctionWhereInput>;\n};\n\nexport type IngredientWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type IngredientsAggregate = {\n  __typename?: 'IngredientsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type IngredientsConnection = {\n  __typename?: 'IngredientsConnection';\n  aggregate: IngredientsAggregate;\n};\n\nexport type IntFilter = {\n  equals?: Maybe<Scalars['Int']>;\n  ne?: Maybe<Scalars['Int']>;\n  in?: Maybe<Array<Scalars['Int']>>;\n  notIn?: Maybe<Array<Scalars['Int']>>;\n  lt?: Maybe<Scalars['Int']>;\n  lte?: Maybe<Scalars['Int']>;\n  gt?: Maybe<Scalars['Int']>;\n  gte?: Maybe<Scalars['Int']>;\n};\n\nexport enum LanguageCode {\n  Ko = 'KO',\n  Vi = 'VI',\n  En = 'EN'\n}\n\nexport type Level = {\n  __typename?: 'Level';\n  minPoints: Scalars['Int'];\n  maxPoints?: Maybe<Scalars['Int']>;\n  id: Scalars['Int'];\n};\n\nexport type LiveStream = {\n  __typename?: 'LiveStream';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  roomId?: Maybe<Scalars['String']>;\n  streamUrl?: Maybe<Scalars['String']>;\n  liveUrl?: Maybe<Scalars['String']>;\n  vodUrl?: Maybe<Scalars['String']>;\n  channelId?: Maybe<Scalars['String']>;\n  status: LiveStreamStatus;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  startedAt?: Maybe<Scalars['DateTime']>;\n  savedDateByViewer?: Maybe<Scalars['DateTime']>;\n  host: User;\n  background?: Maybe<Image>;\n  savedByViewer?: Maybe<Scalars['Boolean']>;\n};\n\nexport type LiveStreamCreateInput = {\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  startedAt?: Maybe<Scalars['DateTime']>;\n  background?: Maybe<ImageCreateOneWithoutLiveStreamInput>;\n  lsProducts?: Maybe<LiveStreamProductCreateManyWithoutLiveStreamInput>;\n};\n\nexport type LiveStreamError = Error & {\n  __typename?: 'LiveStreamError';\n  message: Scalars['String'];\n  status: ErrorStatus;\n  code: LiveStreamErrorCode;\n};\n\nexport enum LiveStreamErrorCode {\n  HaveNotCreatedShop = 'HAVE_NOT_CREATED_SHOP',\n  ShopNotApprovedYet = 'SHOP_NOT_APPROVED_YET',\n  NotEnoughChannels = 'NOT_ENOUGH_CHANNELS',\n  ShopIsBlocked = 'SHOP_IS_BLOCKED'\n}\n\nexport type LiveStreamOrError = LiveStream | LiveStreamError | CommonError;\n\nexport type LiveStreamOrderByInput = {\n  id?: Maybe<OrderBy>;\n  createdAt?: Maybe<OrderBy>;\n};\n\nexport type LiveStreamProduct = {\n  __typename?: 'LiveStreamProduct';\n  id: Scalars['Int'];\n  code: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  currency: Currency;\n  price?: Maybe<Scalars['Int']>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  product?: Maybe<Product>;\n};\n\nexport type LiveStreamProductCreateManyWithoutLiveStreamInput = {\n  create?: Maybe<Array<LiveStreamProductCreateWithoutLiveStreamInput>>;\n};\n\nexport type LiveStreamProductCreateOneWithoutCartItemsInput = {\n  connect: LiveStreamProductWhereUniqueInput;\n};\n\nexport type LiveStreamProductCreateWithoutLiveStreamInput = {\n  code: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  product?: Maybe<ProductCreateOneWithoutLiveStreamProductInput>;\n  price?: Maybe<Scalars['Int']>;\n  currency?: Maybe<Currency>;\n};\n\nexport type LiveStreamProductOrError = LiveStreamProduct | CommonError;\n\nexport type LiveStreamProductOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type LiveStreamProductUpdateInput = {\n  name?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['Int']>;\n  product?: Maybe<ProductUpdateOneWithoutLiveStreamProductInput>;\n};\n\nexport type LiveStreamProductUpdateManyWithoutLiveStreamInput = {\n  create?: Maybe<Array<LiveStreamProductCreateWithoutLiveStreamInput>>;\n  set?: Maybe<Array<LiveStreamProductWhereUniqueInput>>;\n  update?: Maybe<Array<LiveStreamProductUpdateWithoutLiveStreamInput>>;\n};\n\nexport type LiveStreamProductUpdateWithoutLiveStreamInput = {\n  id: Scalars['Int'];\n  code: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  product?: Maybe<ProductUpdateOneWithoutLiveStreamProductInput>;\n  price?: Maybe<Scalars['Int']>;\n  currency?: Maybe<Currency>;\n};\n\nexport type LiveStreamProductWhereInput = {\n  liveStream: LiveStreamWhereInput;\n};\n\nexport type LiveStreamProductWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type LiveStreamStartInput = {\n  roomId: Scalars['String'];\n};\n\nexport enum LiveStreamStatus {\n  Created = 'CREATED',\n  Running = 'RUNNING',\n  Stopped = 'STOPPED'\n}\n\nexport type LiveStreamUpdateInput = {\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  startedAt?: Maybe<Scalars['DateTime']>;\n  background?: Maybe<ImageCreateOneWithoutLiveStreamInput>;\n  lsProducts?: Maybe<LiveStreamProductUpdateManyWithoutLiveStreamInput>;\n};\n\nexport type LiveStreamWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  host?: Maybe<UserWhereInput>;\n  status?: Maybe<LiveStreamStatus>;\n  statusIn?: Maybe<Array<LiveStreamStatus>>;\n};\n\nexport type LiveStreamWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type Location = {\n  __typename?: 'Location';\n  longitude: Scalars['Float'];\n  latitude: Scalars['Float'];\n};\n\nexport type LocationInput = {\n  longitude: Scalars['Float'];\n  latitude: Scalars['Float'];\n};\n\nexport type M_LikeReviewResult = {\n  __typename?: 'M_LikeReviewResult';\n  status: Scalars['Boolean'];\n  message: Scalars['String'];\n  count: Scalars['Int'];\n};\n\nexport type MediaEntityUnion = Post | LiveStream;\n\nexport type MediaOrderByInput = {\n  createdAt?: Maybe<OrderBy>;\n};\n\nexport enum MediaType {\n  Video = 'VIDEO',\n  LiveStream = 'LIVE_STREAM'\n}\n\nexport type MediaWhereInput = {\n  user: UserWhereUniqueInput;\n  type?: Maybe<MediaType>;\n  createdAt?: Maybe<DateTimeFilter>;\n};\n\nexport type MediaWhereUniqueInput = {\n  post?: Maybe<PostWhereUniqueInput>;\n  liveStream?: Maybe<LiveStreamWhereUniqueInput>;\n};\n\nexport type MediasAggregate = {\n  __typename?: 'MediasAggregate';\n  count: Scalars['Int'];\n};\n\nexport type MediasConnection = {\n  __typename?: 'MediasConnection';\n  aggregate: MediasAggregate;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  followUser: User;\n  unfollowUser: User;\n  updateUser: User;\n  deleteUser: User;\n  saveMedia: Scalars['Boolean'];\n  unsaveMedia: Scalars['Boolean'];\n  upgradeUser: User;\n  blockUser: User;\n  saveFavouriteBrands: Scalars['Boolean'];\n  createBrand: Brand;\n  updateBrand: Brand;\n  createCastComment: CastComment;\n  createEventComment: EventComment;\n  deleteEventComment: EventComment;\n  cancelEventComment: EventComment;\n  createEventNotification: EventNotification;\n  updateEventNotification: EventNotification;\n  deleteEventNotification: EventNotification;\n  createEvent: Event;\n  updateEvent: Event;\n  deleteEvent: Event;\n  reclaimEventComment: EventComment;\n  awardEventComment: EventComment;\n  awardEventComments: Scalars['Boolean'];\n  createPostComment: PostComment;\n  updatePostComment: PostComment;\n  reactPostComment: PostComment;\n  deletePostComment: PostComment;\n  hidePostComment: PostComment;\n  unhidePostComment: PostComment;\n  markBestAnswer: Scalars['Boolean'];\n  createPost: PostOrError;\n  createPostV2: PostOrError;\n  updatePost: Post;\n  reactPost: Post;\n  deletePost: Post;\n  subscribePost: Scalars['Boolean'];\n  unsubscribePost: Scalars['Boolean'];\n  generatePresignedUrl: PresignedUrl;\n  viewPost: Scalars['Boolean'];\n  reportPost: PostReport;\n  reportPostComment: PostCommentReport;\n  approvePost: Post;\n  rejectPost: Post;\n  approvePostCommentReport: PostCommentReport;\n  rejectPostCommentReport: PostCommentReport;\n  /** @deprecated please use bookmarkProduct instead, this field will be remove from 1/11/2021 */\n  saveProduct: Scalars['Boolean'];\n  bookmarkProduct: Scalars['Boolean'];\n  /** @deprecated please use unBookmarkProduct instead, this field will be remove from 1/11/2021 */\n  unsaveProduct: Scalars['Boolean'];\n  unBookmarkProduct: Scalars['Boolean'];\n  createProductRequest: ProductRequest;\n  createProductEdit: ProductEdit;\n  createProduct: Product;\n  updateProduct: Product;\n  updateProductRequest: ProductRequest;\n  createReviewReport: ReviewReport;\n  likeReview: M_LikeReviewResult;\n  createReview: Review;\n  updateReview: Review;\n  deleteReview: Review;\n  approveReview: Review;\n  rejectReview: Review;\n  approveReviewReport: ReviewReport;\n  rejectReviewReport: ReviewReport;\n  createDevice: Device;\n  /** @deprecated use checkIn instead */\n  getDailyActivePoints: Scalars['Boolean'];\n  /** @deprecated use checkIn instead */\n  getActivePoints: Scalars['Boolean'];\n  createCategory: Category;\n  updateCategory: Category;\n  createCaution: IngredientCaution;\n  updateCaution: IngredientCaution;\n  createFunction: SpecialIngredientFunction;\n  updateFunction: SpecialIngredientFunction;\n  createIngredient: Ingredient;\n  updateIngredient: Ingredient;\n  createChannel: ChannelOrError;\n  stopChannel: ChannelOrError;\n  createLiveStream: LiveStreamOrError;\n  updateLiveStream: LiveStreamOrError;\n  startLiveStream: LiveStreamOrError;\n  stopLiveStream: LiveStreamOrError;\n  notifyLiveStream: Scalars['Boolean'];\n  deleteLiveStream: LiveStreamOrError;\n  updateLiveStreamProduct: LiveStreamProductOrError;\n  deleteLiveStreamProduct: LiveStreamProductOrError;\n  createBanners: Scalars['Boolean'];\n  /** @deprecated use createShopV2 instead */\n  createShop: Shop;\n  createShopV2: ShopOrMutationError;\n  /** @deprecated use updateShopV2 instead */\n  updateShop: Shop;\n  updateShopV2: ShopOrMutationError;\n  createShopToProducts: Array<ShopToProduct>;\n  updateShopToProduct: ShopToProduct;\n  deleteShopToProduct: ShopToProduct;\n  approveShop: Shop;\n  blockShop: Shop;\n  uploadShopToProducts: Array<ShopToProduct>;\n  createCartItem: CartItemOrError;\n  updateCartItem: CartItemOrError;\n  deleteCartItem: CartItemOrError;\n  createShippingAddress: ShippingAddressOrError;\n  updateShippingAddress: ShippingAddressOrError;\n  deleteShippingAddress: ShippingAddressOrError;\n  createOrder: OrderOrError;\n  updateOrder: OrderOrError;\n  confirmOrder: OrderOrError;\n  cancelOrder: OrderOrError;\n  login: AuthPayload;\n};\n\n\nexport type MutationFollowUserArgs = {\n  where: UserWhereUniqueInput;\n};\n\n\nexport type MutationUnfollowUserArgs = {\n  where: UserWhereUniqueInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  data: UserUpdateInput;\n  where: UserWhereUniqueInput;\n};\n\n\nexport type MutationDeleteUserArgs = {\n  data: UserDeleteInput;\n  where: UserWhereUniqueInput;\n};\n\n\nexport type MutationSaveMediaArgs = {\n  where: MediaWhereUniqueInput;\n};\n\n\nexport type MutationUnsaveMediaArgs = {\n  where: MediaWhereUniqueInput;\n};\n\n\nexport type MutationUpgradeUserArgs = {\n  isOfficial: Scalars['Boolean'];\n  where: UserWhereUniqueInput;\n};\n\n\nexport type MutationBlockUserArgs = {\n  isBlocked: Scalars['Boolean'];\n  where: UserWhereUniqueInput;\n};\n\n\nexport type MutationSaveFavouriteBrandsArgs = {\n  data: Array<BrandWhereUniqueInput>;\n};\n\n\nexport type MutationCreateBrandArgs = {\n  data: BrandCreateInput;\n};\n\n\nexport type MutationUpdateBrandArgs = {\n  data: BrandUpdateInput;\n  where: BrandWhereUniqueInput;\n};\n\n\nexport type MutationCreateCastCommentArgs = {\n  data: CastCommentCreateInput;\n};\n\n\nexport type MutationCreateEventCommentArgs = {\n  data: EventCommentCreateInput;\n};\n\n\nexport type MutationDeleteEventCommentArgs = {\n  where: EventCommentWhereUniqueInput;\n};\n\n\nexport type MutationCancelEventCommentArgs = {\n  where: EventCommentWhereUniqueInput;\n};\n\n\nexport type MutationCreateEventNotificationArgs = {\n  data: EventNotificationCreateInput;\n};\n\n\nexport type MutationUpdateEventNotificationArgs = {\n  where: EventNotificationWhereUniqueInput;\n  data: EventNotificationUpdateInput;\n};\n\n\nexport type MutationDeleteEventNotificationArgs = {\n  where: EventNotificationWhereUniqueInput;\n};\n\n\nexport type MutationCreateEventArgs = {\n  data: EventCreateInput;\n};\n\n\nexport type MutationUpdateEventArgs = {\n  data: EventUpdateInput;\n  where: EventWhereUniqueInput;\n};\n\n\nexport type MutationDeleteEventArgs = {\n  where: EventWhereUniqueInput;\n};\n\n\nexport type MutationReclaimEventCommentArgs = {\n  payback: Scalars['Boolean'];\n  where: EventCommentWhereUniqueInput;\n};\n\n\nexport type MutationAwardEventCommentArgs = {\n  where: EventCommentWhereUniqueInput;\n};\n\n\nexport type MutationAwardEventCommentsArgs = {\n  data: EventCommentUpdateManyWithoutEventInput;\n};\n\n\nexport type MutationCreatePostCommentArgs = {\n  data: PostCommentCreateInput;\n};\n\n\nexport type MutationUpdatePostCommentArgs = {\n  data: PostCommentUpdateInput;\n  where: PostCommentWhereUniqueInput;\n};\n\n\nexport type MutationReactPostCommentArgs = {\n  status: ReactStatus;\n  where: PostCommentWhereUniqueInput;\n};\n\n\nexport type MutationDeletePostCommentArgs = {\n  where: PostCommentWhereUniqueInput;\n};\n\n\nexport type MutationHidePostCommentArgs = {\n  where: PostCommentWhereUniqueInput;\n};\n\n\nexport type MutationUnhidePostCommentArgs = {\n  where: PostCommentWhereUniqueInput;\n};\n\n\nexport type MutationMarkBestAnswerArgs = {\n  where: PostCommentWhereUniqueInput;\n};\n\n\nexport type MutationCreatePostArgs = {\n  data: PostCreateInput;\n};\n\n\nexport type MutationCreatePostV2Args = {\n  data: PostCreateInput;\n};\n\n\nexport type MutationUpdatePostArgs = {\n  where: PostWhereUniqueInput;\n  data: PostUpdateInput;\n};\n\n\nexport type MutationReactPostArgs = {\n  status: ReactStatus;\n  where: PostWhereUniqueInput;\n};\n\n\nexport type MutationDeletePostArgs = {\n  where: PostWhereUniqueInput;\n};\n\n\nexport type MutationSubscribePostArgs = {\n  where: PostWhereUniqueInput;\n};\n\n\nexport type MutationUnsubscribePostArgs = {\n  where: PostWhereUniqueInput;\n};\n\n\nexport type MutationViewPostArgs = {\n  where: PostWhereUniqueInput;\n};\n\n\nexport type MutationReportPostArgs = {\n  data: PostReportCreateInput;\n};\n\n\nexport type MutationReportPostCommentArgs = {\n  data: PostCommentReportCreateInput;\n};\n\n\nexport type MutationApprovePostArgs = {\n  where: PostWhereUniqueInput;\n};\n\n\nexport type MutationRejectPostArgs = {\n  where: PostWhereUniqueInput;\n};\n\n\nexport type MutationApprovePostCommentReportArgs = {\n  where: PostCommentReportWhereUniqueInput;\n};\n\n\nexport type MutationRejectPostCommentReportArgs = {\n  where: PostCommentReportWhereUniqueInput;\n};\n\n\nexport type MutationSaveProductArgs = {\n  where: ProductWhereUniqueInput;\n};\n\n\nexport type MutationBookmarkProductArgs = {\n  where: ProductWhereUniqueInput;\n};\n\n\nexport type MutationUnsaveProductArgs = {\n  where: ProductWhereUniqueInput;\n};\n\n\nexport type MutationUnBookmarkProductArgs = {\n  where: ProductWhereUniqueInput;\n};\n\n\nexport type MutationCreateProductRequestArgs = {\n  data: ProductRequestCreateInput;\n};\n\n\nexport type MutationCreateProductEditArgs = {\n  data: ProductEditCreateInput;\n};\n\n\nexport type MutationCreateProductArgs = {\n  data: ProductCreateInput;\n};\n\n\nexport type MutationUpdateProductArgs = {\n  data: ProductUpdateInput;\n  where: ProductWhereUniqueInput;\n};\n\n\nexport type MutationUpdateProductRequestArgs = {\n  data: ProductRequestUpdateInput;\n  where: ProductRequestWhereUniqueInput;\n};\n\n\nexport type MutationCreateReviewReportArgs = {\n  data: ReviewReportCreateInput;\n};\n\n\nexport type MutationLikeReviewArgs = {\n  productId: Scalars['Int'];\n  productName?: Maybe<Scalars['String']>;\n  authorId?: Maybe<Scalars['Int']>;\n  reviewId: Scalars['Int'];\n};\n\n\nexport type MutationCreateReviewArgs = {\n  data: ReviewCreateInput;\n};\n\n\nexport type MutationUpdateReviewArgs = {\n  data: ReviewUpdateInput;\n  where: ReviewWhereUniqueInput;\n};\n\n\nexport type MutationDeleteReviewArgs = {\n  where: ReviewWhereUniqueInput;\n};\n\n\nexport type MutationApproveReviewArgs = {\n  where: ReviewWhereUniqueInput;\n};\n\n\nexport type MutationRejectReviewArgs = {\n  where: ReviewWhereUniqueInput;\n};\n\n\nexport type MutationApproveReviewReportArgs = {\n  where: ReviewReportWhereUniqueInput;\n};\n\n\nexport type MutationRejectReviewReportArgs = {\n  where: ReviewReportWhereUniqueInput;\n};\n\n\nexport type MutationCreateDeviceArgs = {\n  data: DeviceCreateInput;\n};\n\n\nexport type MutationCreateCategoryArgs = {\n  data: CategoryCreateInput;\n};\n\n\nexport type MutationUpdateCategoryArgs = {\n  data: CategoryUpdateInput;\n  where: CategoryWhereUniqueInput;\n};\n\n\nexport type MutationCreateCautionArgs = {\n  data: CautionCreateInput;\n};\n\n\nexport type MutationUpdateCautionArgs = {\n  data: CautionUpdateInput;\n  where: CautionWhereUniqueInput;\n};\n\n\nexport type MutationCreateFunctionArgs = {\n  data: FunctionCreateInput;\n};\n\n\nexport type MutationUpdateFunctionArgs = {\n  data: FunctionUpdateInput;\n  where: FunctionWhereUniqueInput;\n};\n\n\nexport type MutationCreateIngredientArgs = {\n  data: IngredientCreateInput;\n};\n\n\nexport type MutationUpdateIngredientArgs = {\n  data: IngredientUpdateInput;\n  where: IngredientWhereUniqueInput;\n};\n\n\nexport type MutationStopChannelArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationCreateLiveStreamArgs = {\n  data: LiveStreamCreateInput;\n};\n\n\nexport type MutationUpdateLiveStreamArgs = {\n  data: LiveStreamUpdateInput;\n  where: LiveStreamWhereUniqueInput;\n};\n\n\nexport type MutationStartLiveStreamArgs = {\n  data: LiveStreamStartInput;\n  where: LiveStreamWhereUniqueInput;\n};\n\n\nexport type MutationStopLiveStreamArgs = {\n  where: LiveStreamWhereUniqueInput;\n};\n\n\nexport type MutationNotifyLiveStreamArgs = {\n  where: LiveStreamWhereUniqueInput;\n};\n\n\nexport type MutationDeleteLiveStreamArgs = {\n  where: LiveStreamWhereUniqueInput;\n};\n\n\nexport type MutationUpdateLiveStreamProductArgs = {\n  data: LiveStreamProductUpdateInput;\n  where: LiveStreamProductWhereUniqueInput;\n};\n\n\nexport type MutationDeleteLiveStreamProductArgs = {\n  where: LiveStreamProductWhereUniqueInput;\n};\n\n\nexport type MutationCreateBannersArgs = {\n  data: Array<BannerInput>;\n};\n\n\nexport type MutationCreateShopArgs = {\n  data: ShopCreateInput;\n};\n\n\nexport type MutationCreateShopV2Args = {\n  data: ShopCreateInput;\n};\n\n\nexport type MutationUpdateShopArgs = {\n  data: ShopUpdateInput;\n  where: ShopWhereUniqueInput;\n};\n\n\nexport type MutationUpdateShopV2Args = {\n  data: ShopUpdateInput;\n  where: ShopWhereUniqueInput;\n};\n\n\nexport type MutationCreateShopToProductsArgs = {\n  data: Array<ShopToProductCreateInput>;\n};\n\n\nexport type MutationUpdateShopToProductArgs = {\n  data: ShopToProductUpdateInput;\n  where: ShopToProductWhereUniqueInput;\n};\n\n\nexport type MutationDeleteShopToProductArgs = {\n  where: ShopToProductWhereUniqueInput;\n};\n\n\nexport type MutationApproveShopArgs = {\n  where: ShopWhereUniqueInput;\n};\n\n\nexport type MutationBlockShopArgs = {\n  reason: Scalars['String'];\n  where: ShopWhereUniqueInput;\n};\n\n\nexport type MutationUploadShopToProductsArgs = {\n  data: Array<ShopToProductCreateInput>;\n};\n\n\nexport type MutationCreateCartItemArgs = {\n  data: CartItemCreateInput;\n};\n\n\nexport type MutationUpdateCartItemArgs = {\n  data: CartItemUpdateInput;\n  where: CartItemWhereUniqueInput;\n};\n\n\nexport type MutationDeleteCartItemArgs = {\n  where: CartItemWhereUniqueInput;\n};\n\n\nexport type MutationCreateShippingAddressArgs = {\n  data: ShippingAddressCreateInput;\n};\n\n\nexport type MutationUpdateShippingAddressArgs = {\n  data: ShippingAddressUpdateInput;\n  where: ShippingAddressWhereUniqueInput;\n};\n\n\nexport type MutationDeleteShippingAddressArgs = {\n  where: ShippingAddressWhereUniqueInput;\n};\n\n\nexport type MutationCreateOrderArgs = {\n  data: OrderCreateInput;\n};\n\n\nexport type MutationUpdateOrderArgs = {\n  data: OrderUpdateInput;\n  where: OrderWhereUniqueInput;\n};\n\n\nexport type MutationConfirmOrderArgs = {\n  where: OrderWhereUniqueInput;\n};\n\n\nexport type MutationCancelOrderArgs = {\n  where: OrderWhereUniqueInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type NearByInput = {\n  distance: Scalars['Float'];\n  longitude: Scalars['Float'];\n  latitude: Scalars['Float'];\n};\n\nexport enum OauthProvider {\n  Facebook = 'Facebook',\n  Apple = 'Apple',\n  Instagram = 'Instagram'\n}\n\nexport type Order = {\n  __typename?: 'Order';\n  id: Scalars['Int'];\n  status: OrderStatus;\n  address?: Maybe<Address>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  user: User;\n  shop: Shop;\n  cartItemsConnection: CartItemsConnection;\n  cartItems: Array<CartItem>;\n};\n\n\nexport type OrderCartItemsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<CartItemWhereInput>;\n  orderBy?: Maybe<CartItemOrderByInput>;\n};\n\n\nexport type OrderCartItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<CartItemWhereInput>;\n  orderBy?: Maybe<CartItemOrderByInput>;\n};\n\nexport enum OrderBy {\n  Asc = 'ASC',\n  AscNullsFirst = 'ASC_NULLS_FIRST',\n  AscNullsLast = 'ASC_NULLS_LAST',\n  Desc = 'DESC',\n  DescNullFirst = 'DESC_NULL_FIRST',\n  DescNullLast = 'DESC_NULL_LAST'\n}\n\nexport type OrderCreateInput = {\n  shippingAddress: ShippingAddressCreateOneWithoutOrderInput;\n  shop: ShopCreateOneWithoutOrderInput;\n  cartItems: CartItemCreateManyWithoutOrderInput;\n};\n\nexport type OrderCreateOneWithoutCartItemInput = {\n  connect: OrderWhereUniqueInput;\n};\n\nexport type OrderError = Error & {\n  __typename?: 'OrderError';\n  message: Scalars['String'];\n  status: ErrorStatus;\n  code: OrderErrorCode;\n};\n\nexport enum OrderErrorCode {\n  OrderConfirmed = 'ORDER_CONFIRMED',\n  OrderCancelled = 'ORDER_CANCELLED'\n}\n\nexport type OrderOrError = Order | OrderError | CommonError;\n\nexport type OrderOrderByInput = {\n  id?: Maybe<OrderBy>;\n  createdAt?: Maybe<OrderBy>;\n};\n\nexport enum OrderStatus {\n  Created = 'CREATED',\n  Confirmed = 'CONFIRMED',\n  Cancelled = 'CANCELLED'\n}\n\nexport type OrderUpdateInput = {\n  shippingAddress?: Maybe<ShippingAddressCreateOneWithoutOrderInput>;\n  cartItems?: Maybe<CartItemUpdateManyWithoutOrderInput>;\n};\n\nexport type OrderUpdateOneWithoutCartItemsInput = {\n  connect: OrderWhereUniqueInput;\n};\n\nexport type OrderWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  shop?: Maybe<ShopWhereInput>;\n  user?: Maybe<UserWhereInput>;\n  status?: Maybe<OrderStatus>;\n  cartItemsSome?: Maybe<CartItemWhereInput>;\n};\n\nexport type OrderWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type OrdersAggregate = {\n  __typename?: 'OrdersAggregate';\n  count: Scalars['Int'];\n};\n\nexport type OrdersConnection = {\n  __typename?: 'OrdersConnection';\n  aggregate: OrdersAggregate;\n};\n\nexport enum PackagingtUnit {\n  Pack = 'PACK',\n  Pill = 'PILL',\n  Tube = 'TUBE',\n  Box = 'BOX',\n  Tbsp = 'TBSP'\n}\n\nexport type PointEntityUnion = Post | PostComment | Review | User;\n\nexport type PointHistoriesAggregate = {\n  __typename?: 'PointHistoriesAggregate';\n  count: Scalars['Int'];\n  sum: Scalars['Int'];\n};\n\nexport type PointHistoriesConnection = {\n  __typename?: 'PointHistoriesConnection';\n  aggregate: PointHistoriesAggregate;\n};\n\nexport type PointHistory = {\n  __typename?: 'PointHistory';\n  id: Scalars['Int'];\n  type: PointType;\n  point: Scalars['Int'];\n  status: PointStatus;\n  createdAt: Scalars['DateTime'];\n  entity?: Maybe<PointEntityUnion>;\n};\n\nexport type PointHistoryOrderByInput = {\n  id?: Maybe<OrderBy>;\n  createdAt?: Maybe<OrderBy>;\n};\n\nexport type PointHistoryWhereInput = {\n  user?: Maybe<UserWhereInput>;\n  review?: Maybe<ReviewWhereInput>;\n  redeemable?: Maybe<Scalars['Boolean']>;\n  pointGt?: Maybe<Scalars['Int']>;\n  typeNot?: Maybe<PointType>;\n};\n\nexport enum PointStatus {\n  Created = 'CREATED',\n  Approved = 'APPROVED'\n}\n\nexport enum PointType {\n  FirstReview = 'FIRST_REVIEW',\n  NormalReview = 'NORMAL_REVIEW',\n  SignUp = 'SIGN_UP',\n  DailyActive = 'DAILY_ACTIVE',\n  WeeklyActive = 'WEEKLY_ACTIVE',\n  MonthlyActive = 'MONTHLY_ACTIVE',\n  Gift = 'GIFT',\n  ExchangePointsForCoupons = 'EXCHANGE_POINTS_FOR_COUPONS',\n  FirstPost = 'FIRST_POST',\n  PostWithHighReactions = 'POST_WITH_HIGH_REACTIONS',\n  PostHasManyLikes = 'POST_HAS_MANY_LIKES',\n  RequestProduct = 'REQUEST_PRODUCT',\n  EditProduct = 'EDIT_PRODUCT',\n  FirstComment = 'FIRST_COMMENT',\n  NormalComment = 'NORMAL_COMMENT',\n  EventPoints = 'EVENT_POINTS',\n  BestAnswer = 'BEST_ANSWER',\n  ApprovedReviewReport = 'APPROVED_REVIEW_REPORT',\n  Have_20Followers = 'HAVE_20_FOLLOWERS',\n  Referral = 'REFERRAL',\n  Referee = 'REFEREE',\n  ReferralBonus = 'REFERRAL_BONUS'\n}\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Int'];\n  content?: Maybe<Scalars['String']>;\n  status: PostStatus;\n  points?: Maybe<Scalars['Int']>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  commentedAt?: Maybe<Scalars['DateTime']>;\n  video?: Maybe<Video>;\n  savedDateByViewer?: Maybe<Scalars['DateTime']>;\n  /** @deprecated deprecationReason: 'use reactionOfViewer instead', */\n  reactStatus: ReactStatus;\n  reactionOfViewer: ReactStatus;\n  reactionsConnection: PostReactionsConnection;\n  author: User;\n  category?: Maybe<PostCategory>;\n  products: Array<Product>;\n  images: Array<Image>;\n  comments?: Maybe<Array<PostComment>>;\n  commentsConnection: PostCommentsConnection;\n  imagesConnection: PostImagesConnection;\n  productsConnection: PostProductsConnection;\n  bestAnswer?: Maybe<PostComment>;\n  isUnsubscribedByViewer?: Maybe<Scalars['Boolean']>;\n  review?: Maybe<Review>;\n  postToProducts?: Maybe<Array<PostToProduct>>;\n  savedByViewer?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type PostCommentsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostCommentWhereInput>;\n  orderBy?: Maybe<PostCommentOrderByInput>;\n};\n\n\nexport type PostCommentsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostCommentWhereInput>;\n  orderBy?: Maybe<PostCommentOrderByInput>;\n};\n\n\nexport type PostImagesConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type PostProductsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type PostCategory = {\n  __typename?: 'PostCategory';\n  id: Scalars['Int'];\n  isCreatable: Scalars['Boolean'];\n  menuOrder: Scalars['Int'];\n  translations: Array<PostCategoryTranslation>;\n};\n\n\nexport type PostCategoryTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostCategoryTranslationWhereInput>;\n};\n\nexport type PostCategoryCreateOneWithoutPostsInput = {\n  connect?: Maybe<PostCategoryWhereUniqueInput>;\n};\n\nexport type PostCategoryOrderByInput = {\n  id?: Maybe<OrderBy>;\n  menuOrder?: Maybe<OrderBy>;\n};\n\nexport type PostCategoryTranslation = {\n  __typename?: 'PostCategoryTranslation';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  language: Scalars['String'];\n  isOriginal: Scalars['Boolean'];\n};\n\nexport type PostCategoryTranslationWhereInput = {\n  language?: Maybe<LanguageCode>;\n};\n\nexport type PostCategoryUpdateOneWithoutPostsInput = {\n  connect?: Maybe<PostCategoryWhereUniqueInput>;\n};\n\nexport type PostCategoryWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  idNot?: Maybe<Scalars['ID']>;\n  idIn?: Maybe<Array<Scalars['ID']>>;\n  idNotIn?: Maybe<Array<Scalars['ID']>>;\n  idLt?: Maybe<Scalars['ID']>;\n  idLte?: Maybe<Scalars['ID']>;\n  idGt?: Maybe<Scalars['ID']>;\n  idGte?: Maybe<Scalars['ID']>;\n  nameContains?: Maybe<Scalars['String']>;\n  isCreatable?: Maybe<Scalars['Boolean']>;\n};\n\nexport type PostCategoryWhereUniqueInput = {\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type PostComment = {\n  __typename?: 'PostComment';\n  id: Scalars['Int'];\n  content?: Maybe<Scalars['String']>;\n  status: PostCommentStatus;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  author: User;\n  /** @deprecated use reactionOfViewer instead */\n  reactStatus: ReactStatus;\n  reactionOfViewer: ReactStatus;\n  reactionConnections: PostCommentReactionsConnection;\n  childrenConnection: PostCommentChildrenConnection;\n  children: Array<PostComment>;\n  parent?: Maybe<PostComment>;\n  post: Post;\n  images: Array<Image>;\n  imagesConnection: PostCommentImagesConnection;\n};\n\n\nexport type PostCommentChildrenConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type PostCommentChildrenArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostCommentWhereInput>;\n  orderBy?: Maybe<PostCommentOrderByInput>;\n};\n\n\nexport type PostCommentImagesConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type PostCommentChildrenAggregate = {\n  __typename?: 'PostCommentChildrenAggregate';\n  count: Scalars['Int'];\n};\n\nexport type PostCommentChildrenConnection = {\n  __typename?: 'PostCommentChildrenConnection';\n  aggregate: PostCommentChildrenAggregate;\n};\n\nexport type PostCommentCreateInput = {\n  content?: Maybe<Scalars['String']>;\n  mentions?: Maybe<Array<UserWhereUniqueInput>>;\n  post: PostCreateOneWithoutPostCommentsInput;\n  parent?: Maybe<PostCommentCreateOneWithoutChildrenInput>;\n  images?: Maybe<ImageCreateManyWithoutPostCommentInput>;\n  review?: Maybe<ReviewCreateOneWithoutPostCommentsInput>;\n};\n\nexport type PostCommentCreateManyWithoutPostInput = {\n  create?: Maybe<Array<PostCommentCreateWithoutPostInput>>;\n};\n\nexport type PostCommentCreateOneWithoutChildrenInput = {\n  connect?: Maybe<PostCommentWhereUniqueInput>;\n};\n\nexport type PostCommentCreateOneWithoutReportsInput = {\n  connect?: Maybe<PostCommentWhereUniqueInput>;\n};\n\nexport type PostCommentCreateWithoutPostInput = {\n  content?: Maybe<Scalars['String']>;\n  mentions?: Maybe<Array<UserWhereUniqueInput>>;\n  images?: Maybe<ImageCreateManyWithoutPostCommentInput>;\n};\n\nexport type PostCommentImagesAggregate = {\n  __typename?: 'PostCommentImagesAggregate';\n  count: Scalars['Int'];\n};\n\nexport type PostCommentImagesConnection = {\n  __typename?: 'PostCommentImagesConnection';\n  aggregate: PostCommentImagesAggregate;\n};\n\nexport type PostCommentOrderByInput = {\n  id?: Maybe<OrderBy>;\n  createdAt?: Maybe<OrderBy>;\n};\n\nexport type PostCommentReactionsAggregate = {\n  __typename?: 'PostCommentReactionsAggregate';\n  sum: PostCommentReactionsSum;\n};\n\nexport type PostCommentReactionsConnection = {\n  __typename?: 'PostCommentReactionsConnection';\n  aggregate: PostCommentReactionsAggregate;\n};\n\nexport type PostCommentReactionsSum = {\n  __typename?: 'PostCommentReactionsSum';\n  value: Scalars['Int'];\n};\n\nexport type PostCommentReport = {\n  __typename?: 'PostCommentReport';\n  id: Scalars['Int'];\n  type: PostCommentReportType;\n  reason?: Maybe<Scalars['String']>;\n  userId: Scalars['Int'];\n  postCommentId: Scalars['Int'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  user: User;\n  postComment: PostComment;\n};\n\nexport type PostCommentReportCreateInput = {\n  type?: Maybe<PostCommentReportType>;\n  reason?: Maybe<Scalars['String']>;\n  postComment: PostCommentCreateOneWithoutReportsInput;\n};\n\nexport type PostCommentReportOrderByInput = {\n  id?: Maybe<OrderBy>;\n  createdAt?: Maybe<OrderBy>;\n};\n\nexport enum PostCommentReportType {\n  Spam = 'SPAM',\n  Advertising = 'ADVERTISING',\n  Harass = 'HARASS',\n  Swearing = 'SWEARING',\n  PersonalInformation = 'PERSONAL_INFORMATION',\n  Other = 'OTHER'\n}\n\nexport type PostCommentReportWhereInput = {\n  reasonContains?: Maybe<Scalars['String']>;\n  user?: Maybe<UserWhereInput>;\n  post?: Maybe<PostWhereInput>;\n  comment?: Maybe<PostCommentWhereInput>;\n};\n\nexport type PostCommentReportWhereUniqueInput = {\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type PostCommentReportsAggregate = {\n  __typename?: 'PostCommentReportsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type PostCommentReportsConnection = {\n  __typename?: 'PostCommentReportsConnection';\n  aggregate: PostCommentReportsAggregate;\n};\n\nexport enum PostCommentStatus {\n  Created = 'CREATED',\n  Hidden = 'HIDDEN',\n  Reported = 'REPORTED'\n}\n\nexport type PostCommentUpdateInput = {\n  content?: Maybe<Scalars['String']>;\n  images?: Maybe<ImageUpdateManyWithoutPostCommentInput>;\n};\n\nexport type PostCommentWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  idGt?: Maybe<Scalars['Int']>;\n  idGte?: Maybe<Scalars['Int']>;\n  idLt?: Maybe<Scalars['Int']>;\n  idLte?: Maybe<Scalars['Int']>;\n  idIsNull?: Maybe<Scalars['Boolean']>;\n  post?: Maybe<PostWhereInput>;\n  parent?: Maybe<PostCommentWhereInput>;\n};\n\nexport type PostCommentWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type PostCommentsAggregate = {\n  __typename?: 'PostCommentsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type PostCommentsConnection = {\n  __typename?: 'PostCommentsConnection';\n  aggregate: PostCommentsAggregate;\n};\n\nexport type PostCreateError = Error & {\n  __typename?: 'PostCreateError';\n  message: Scalars['String'];\n  status: ErrorStatus;\n  code: PostCreateErrorCode;\n  expectedValue?: Maybe<Scalars['Int']>;\n  currentValue?: Maybe<Scalars['Int']>;\n};\n\nexport enum PostCreateErrorCode {\n  HaveNotVerifiedPhoneNumber = 'HAVE_NOT_VERIFIED_PHONE_NUMBER',\n  HaveNotVerifiedEmail = 'HAVE_NOT_VERIFIED_EMAIL',\n  NotEnoughPoints = 'NOT_ENOUGH_POINTS',\n  ExceedMaxSharedPointsPerDay = 'EXCEED_MAX_SHARED_POINTS_PER_DAY'\n}\n\nexport type PostCreateInput = {\n  content?: Maybe<Scalars['String']>;\n  points?: Maybe<Scalars['Int']>;\n  mentions?: Maybe<Array<UserWhereUniqueInput>>;\n  category?: Maybe<PostCategoryCreateOneWithoutPostsInput>;\n  products?: Maybe<ProductCreateManyWithoutPostInput>;\n  images?: Maybe<ImageCreateManyWithoutPostInput>;\n  isNewApi?: Maybe<Scalars['Boolean']>;\n  comments?: Maybe<PostCommentCreateManyWithoutPostInput>;\n  review?: Maybe<ReviewCreateOneWithoutPostInput>;\n  videoKey?: Maybe<Scalars['String']>;\n};\n\nexport type PostCreateOneWithoutPostCommentsInput = {\n  connect?: Maybe<PostWhereUniqueInput>;\n  create?: Maybe<PostCreateWithoutPostCommentsInput>;\n};\n\nexport type PostCreateOneWithoutReportsInput = {\n  connect?: Maybe<PostWhereUniqueInput>;\n};\n\nexport type PostCreateWithoutPostCommentsInput = {\n  review?: Maybe<ReviewCreateOneWithoutPostInput>;\n};\n\nexport type PostImagesAggregate = {\n  __typename?: 'PostImagesAggregate';\n  count: Scalars['Int'];\n};\n\nexport type PostImagesConnection = {\n  __typename?: 'PostImagesConnection';\n  aggregate: PostImagesAggregate;\n};\n\nexport type PostLikesAggregateOrderBy = {\n  count?: Maybe<Scalars['String']>;\n};\n\nexport type PostOrError = Post | PostCreateError | CommonError;\n\nexport type PostOrderByInput = {\n  id?: Maybe<OrderBy>;\n  likesAggregate?: Maybe<PostLikesAggregateOrderBy>;\n  newest?: Maybe<OrderBy>;\n  commentedAt?: Maybe<OrderBy>;\n};\n\nexport type PostProductsAggregate = {\n  __typename?: 'PostProductsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type PostProductsConnection = {\n  __typename?: 'PostProductsConnection';\n  aggregate: PostProductsAggregate;\n};\n\nexport enum PostQueryType {\n  Following = 'FOLLOWING',\n  Discovery = 'DISCOVERY',\n  Normal = 'NORMAL'\n}\n\nexport type PostReactionsAggregate = {\n  __typename?: 'PostReactionsAggregate';\n  sum: PostReactionsSum;\n};\n\nexport type PostReactionsConnection = {\n  __typename?: 'PostReactionsConnection';\n  aggregate: PostReactionsAggregate;\n};\n\nexport type PostReactionsSum = {\n  __typename?: 'PostReactionsSum';\n  value: Scalars['Int'];\n};\n\nexport type PostReport = {\n  __typename?: 'PostReport';\n  id: Scalars['Int'];\n  type: PostReportType;\n  reason?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['Boolean']>;\n  userId: Scalars['Int'];\n  postId: Scalars['Int'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  post: Post;\n  user: User;\n};\n\nexport type PostReportCreateInput = {\n  type?: Maybe<PostReportType>;\n  reason?: Maybe<Scalars['String']>;\n  post: PostCreateOneWithoutReportsInput;\n};\n\nexport enum PostReportType {\n  Repeat = 'REPEAT',\n  Advertising = 'ADVERTISING',\n  Swearing = 'SWEARING',\n  PersonalInformation = 'PERSONAL_INFORMATION',\n  Other = 'OTHER'\n}\n\nexport enum PostStatus {\n  Created = 'CREATED',\n  Approved = 'APPROVED',\n  Hidden = 'HIDDEN'\n}\n\nexport type PostToProduct = {\n  __typename?: 'PostToProduct';\n  productId: Scalars['Int'];\n  shopId?: Maybe<Scalars['Int']>;\n  price?: Maybe<Scalars['Int']>;\n  shop?: Maybe<Shop>;\n  product: Product;\n  externalLinks?: Maybe<Array<ExternalLink>>;\n};\n\nexport type PostUpdateInput = {\n  content?: Maybe<Scalars['String']>;\n  video?: Maybe<VideoUpdateOneWithoutPostInput>;\n  category?: Maybe<PostCategoryUpdateOneWithoutPostsInput>;\n  products?: Maybe<ProductUpdateManyWithoutPostInput>;\n  images?: Maybe<ImageUpdateManyWithoutPostInput>;\n};\n\nexport type PostWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  idGt?: Maybe<Scalars['Int']>;\n  idGte?: Maybe<Scalars['Int']>;\n  idLt?: Maybe<Scalars['Int']>;\n  idLte?: Maybe<Scalars['Int']>;\n  contentContains?: Maybe<Scalars['String']>;\n  status?: Maybe<PostStatus>;\n  author?: Maybe<UserWhereInput>;\n  productsSome?: Maybe<ProductWhereInput>;\n  category?: Maybe<PostCategoryWhereInput>;\n  text?: Maybe<Scalars['String']>;\n  commentedAtLt?: Maybe<Scalars['DateTime']>;\n  queryType?: Maybe<PostQueryType>;\n  review?: Maybe<ReviewWhereInput>;\n  createdAtLte?: Maybe<Scalars['DateTime']>;\n  createdAtGte?: Maybe<Scalars['DateTime']>;\n  video?: Maybe<VideoWhereInput>;\n};\n\nexport type PostWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type PostsAggregate = {\n  __typename?: 'PostsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type PostsConnection = {\n  __typename?: 'PostsConnection';\n  aggregate: PostsAggregate;\n};\n\nexport type PresignedUrl = {\n  __typename?: 'PresignedUrl';\n  key: Scalars['String'];\n  url: Scalars['String'];\n};\n\nexport type Product = {\n  __typename?: 'Product';\n  /** @deprecated use uid instead */\n  id: Scalars['Int'];\n  status: ProductStatus;\n  measure: Scalars['String'];\n  price?: Maybe<Scalars['Int']>;\n  priceUnit: Scalars['String'];\n  videoTitle?: Maybe<Scalars['String']>;\n  videoUrl?: Maybe<Scalars['String']>;\n  attributes?: Maybe<ProductAttribute>;\n  updatedAt: Scalars['DateTime'];\n  uid: Scalars['ID'];\n  brand: Brand;\n  categories: Array<Category>;\n  translations: Array<ProductTranslation>;\n  thumbnail?: Maybe<Image>;\n  reviews?: Maybe<Array<Review>>;\n  reviewsConnection: ReviewsConnection;\n  barcodes: Array<Barcode>;\n  barcodesConnection: BarcodesConnection;\n  ingredients: Array<Ingredient>;\n  ingredientsConnection: IngredientsConnection;\n  postsConnection: PostsConnection;\n  functions: Array<SpecialIngredientFunction>;\n  functionsConnection: SpecialIngredientFunctionsConnection;\n  ingredientCautionsConnection: IngredientCautionsConnection;\n  imagesConnection: ImagesConnection;\n  images: Array<Image>;\n  rankings: Array<ProductRanking>;\n  wishedByViewer: Scalars['Boolean'];\n  reviewedByViewer: Scalars['Boolean'];\n  reviewsCountByRate: ReviewsCountByRate;\n  soldByShops: Scalars['Boolean'];\n  alreadySoldByViewer: Scalars['Boolean'];\n  stockInfoOfViewer?: Maybe<ShopToProduct>;\n  productToIngredients: Array<ProductToIngredient>;\n  productToIngredientsConnection: ProductToIngredientsConnection;\n  numberOfUsers: Scalars['Int'];\n  amountOfUsageByViewerToday?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ProductTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductTranslationWhereInput>;\n  orderBy?: Maybe<ProductTranslationOrderByInput>;\n};\n\n\nexport type ProductReviewsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewWhereInput>;\n  orderBy?: Maybe<ReviewOrderByInput>;\n};\n\n\nexport type ProductReviewsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewWhereInput>;\n  orderBy?: Maybe<ReviewOrderByInput>;\n};\n\n\nexport type ProductBarcodesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewWhereInput>;\n  orderBy?: Maybe<ReviewOrderByInput>;\n};\n\n\nexport type ProductBarcodesConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<BarcodeWhereInput>;\n  orderBy?: Maybe<BarcodeOrderByInput>;\n};\n\n\nexport type ProductIngredientsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientWhereInput>;\n  orderBy?: Maybe<IngredientOrderByInput>;\n};\n\n\nexport type ProductIngredientsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientWhereInput>;\n  orderBy?: Maybe<IngredientOrderByInput>;\n};\n\n\nexport type ProductPostsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostWhereInput>;\n  orderBy?: Maybe<Array<PostOrderByInput>>;\n};\n\n\nexport type ProductFunctionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<SpecialIngredientFunctionWhereInput>;\n  orderBy?: Maybe<SpecialIngredientFunctionOrderByInput>;\n};\n\n\nexport type ProductFunctionsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<SpecialIngredientFunctionWhereInput>;\n  orderBy?: Maybe<SpecialIngredientFunctionOrderByInput>;\n};\n\n\nexport type ProductIngredientCautionsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientCautionWhereInput>;\n  orderBy?: Maybe<BaseOrderByInput>;\n};\n\n\nexport type ProductImagesConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ImageWhereInput>;\n  orderBy?: Maybe<ImageOrderByInput>;\n};\n\n\nexport type ProductImagesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ImageWhereInput>;\n  orderBy?: Maybe<ImageOrderByInput>;\n};\n\n\nexport type ProductRankingsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductRankingWhereInput>;\n  orderBy?: Maybe<Array<ProductRankingOrderByInput>>;\n};\n\n\nexport type ProductProductToIngredientsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductToIngredientWhereInput>;\n  orderBy?: Maybe<ProductToIngredientOrderByInput>;\n};\n\n\nexport type ProductProductToIngredientsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductToIngredientWhereInput>;\n  orderBy?: Maybe<ProductToIngredientOrderByInput>;\n};\n\nexport type ProductAttribute = {\n  __typename?: 'ProductAttribute';\n  rdi?: Maybe<Scalars['Float']>;\n  packagingUnit?: Maybe<PackagingtUnit>;\n  netWeightPerPackage?: Maybe<Scalars['Float']>;\n  weightUnit?: Maybe<Unit>;\n  netVolumePerPackage?: Maybe<Scalars['Float']>;\n  volumeUnit?: Maybe<Unit>;\n  energyPerPackage?: Maybe<Scalars['Float']>;\n  energyUnit?: Maybe<Unit>;\n};\n\nexport type ProductAttributeCreateNestedOneWithoutProductInput = {\n  create: ProductAttributeCreateWithoutProductInput;\n};\n\nexport type ProductAttributeCreateWithoutProductInput = {\n  rdi?: Maybe<Scalars['Float']>;\n  packagingUnit?: Maybe<PackagingtUnit>;\n  netWeightPerPackage?: Maybe<Scalars['Float']>;\n  weightUnit?: Maybe<Unit>;\n  netVolumePerPackage?: Maybe<Scalars['Float']>;\n  volumeUnit?: Maybe<Unit>;\n  energyPerPackage?: Maybe<Scalars['Float']>;\n  energyUnit?: Maybe<Unit>;\n};\n\nexport type ProductAttributeUpdateNestedOneWithoutProductInput = {\n  create: ProductAttributeCreateWithoutProductInput;\n};\n\nexport type ProductCreateInput = {\n  status?: Maybe<ProductStatus>;\n  price: Scalars['Int'];\n  measure: Scalars['String'];\n  videoTitle?: Maybe<Scalars['String']>;\n  videoUrl?: Maybe<Scalars['String']>;\n  attribute?: Maybe<ProductAttributeCreateNestedOneWithoutProductInput>;\n  productToIngredients?: Maybe<ProductToIngredientCreateNestedManyWithoutProductInput>;\n  brand: BrandCreateOneWithoutProductInput;\n  categories: CategoryCreateManyWithoutProductInput;\n  barcodes?: Maybe<BarcodeCreateManyWithoutProductInput>;\n  translations: ProductTranslationCreateManyWithoutProductInput;\n  thumbnail: ImageCreateOneWithoutProductInput;\n};\n\nexport type ProductCreateManyWithoutPostInput = {\n  connect?: Maybe<Array<ProductWhereUniqueInput>>;\n};\n\nexport type ProductCreateOneWithoutEditInput = {\n  connect: ProductWhereUniqueInput;\n};\n\nexport type ProductCreateOneWithoutLiveStreamProductInput = {\n  connect: ProductWhereUniqueInput;\n};\n\nexport type ProductCreateOneWithoutShopToProductsInput = {\n  connect: ProductWhereUniqueInput;\n};\n\nexport type ProductEdit = {\n  __typename?: 'ProductEdit';\n  id: Scalars['Int'];\n  content: Scalars['String'];\n  status?: Maybe<ProductEditStatus>;\n  images?: Maybe<Array<Scalars['String']>>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  user: User;\n};\n\nexport type ProductEditCreateInput = {\n  product: ProductCreateOneWithoutEditInput;\n  content: Scalars['String'];\n  images?: Maybe<Array<Scalars['String']>>;\n};\n\nexport enum ProductEditStatus {\n  Created = 'CREATED'\n}\n\nexport type ProductOrderByInput = {\n  id?: Maybe<OrderBy>;\n  price?: Maybe<OrderBy>;\n  updatedAt?: Maybe<OrderBy>;\n  reviewsConnection?: Maybe<ReviewsAggregateOrderByInput>;\n};\n\nexport type ProductRanking = {\n  __typename?: 'ProductRanking';\n  ranking: Scalars['Int'];\n  rankingChange?: Maybe<Scalars['Int']>;\n  product: Product;\n  category: Category;\n};\n\nexport type ProductRankingOrderByInput = {\n  product?: Maybe<ProductOrderByInput>;\n  ranking?: Maybe<OrderBy>;\n};\n\nexport type ProductRankingWhereInput = {\n  product?: Maybe<ProductWhereInput>;\n  category?: Maybe<CategoryWhereInput>;\n};\n\nexport type ProductRankingsAggregate = {\n  __typename?: 'ProductRankingsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type ProductRankingsConnection = {\n  __typename?: 'ProductRankingsConnection';\n  aggregate: ProductRankingsAggregate;\n};\n\nexport type ProductRequest = {\n  __typename?: 'ProductRequest';\n  id: Scalars['Int'];\n  content: Scalars['String'];\n  isDone: Scalars['Boolean'];\n  images?: Maybe<Array<Scalars['String']>>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  user: User;\n};\n\nexport type ProductRequestCreateInput = {\n  content: Scalars['String'];\n  images?: Maybe<Array<Scalars['String']>>;\n};\n\nexport type ProductRequestOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type ProductRequestUpdateInput = {\n  isDone: Scalars['Boolean'];\n};\n\nexport type ProductRequestWhereInput = {\n  contentContains?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['Boolean']>;\n};\n\nexport type ProductRequestWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type ProductRequestsAggregate = {\n  __typename?: 'ProductRequestsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type ProductRequestsConnection = {\n  __typename?: 'ProductRequestsConnection';\n  aggregate: ProductRequestsAggregate;\n};\n\nexport type ProductSearchResult = {\n  __typename?: 'ProductSearchResult';\n  total: Scalars['Int'];\n  products: Array<Product>;\n};\n\nexport enum ProductStatus {\n  Active = 'ACTIVE',\n  Inactive = 'INACTIVE'\n}\n\nexport type ProductToIngredient = {\n  __typename?: 'ProductToIngredient';\n  attributes?: Maybe<ProductToIngredientAttribute>;\n  ingredient: Ingredient;\n};\n\nexport type ProductToIngredientAttribute = {\n  __typename?: 'ProductToIngredientAttribute';\n  amount?: Maybe<Scalars['Float']>;\n  amountUnit?: Maybe<Unit>;\n};\n\nexport type ProductToIngredientAttributeCreateNestedOneWithoutProductToIngredient = {\n  create: ProductToIngredientAttributeCreateWithoutProductToProductInput;\n};\n\nexport type ProductToIngredientAttributeCreateWithoutProductToProductInput = {\n  amount?: Maybe<Scalars['Float']>;\n  amountUnit?: Maybe<Unit>;\n};\n\nexport type ProductToIngredientCreateNestedManyWithoutProductInput = {\n  create: Array<ProductToIngredientCreateWithoutProductInput>;\n};\n\nexport type ProductToIngredientCreateWithoutProductInput = {\n  ingredientId: Scalars['Int'];\n  attribute?: Maybe<ProductToIngredientAttributeCreateNestedOneWithoutProductToIngredient>;\n};\n\nexport type ProductToIngredientOrderByInput = {\n  ingredient?: Maybe<IngredientOrderByInput>;\n};\n\nexport type ProductToIngredientUpdateNestedManyWithoutProductInput = {\n  create: Array<ProductToIngredientCreateWithoutProductInput>;\n};\n\nexport type ProductToIngredientWhereInput = {\n  product?: Maybe<ProductWhereInput>;\n  ingredient?: Maybe<IngredientWhereInput>;\n};\n\nexport type ProductToIngredientsAggregate = {\n  __typename?: 'ProductToIngredientsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type ProductToIngredientsConnection = {\n  __typename?: 'ProductToIngredientsConnection';\n  aggregate: ProductToIngredientsAggregate;\n};\n\nexport type ProductTranslation = {\n  __typename?: 'ProductTranslation';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  imageDescription?: Maybe<Scalars['String']>;\n  isOriginal: Scalars['Boolean'];\n  product: Product;\n};\n\nexport type ProductTranslationCreateManyWithoutProductInput = {\n  create: Array<ProductTranslationCreateWithoutProductInput>;\n};\n\nexport type ProductTranslationCreateWithoutProductInput = {\n  name: Scalars['String'];\n  description: Scalars['String'];\n  imageDescription?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  isOriginal?: Maybe<Scalars['Boolean']>;\n  slug: Scalars['String'];\n};\n\nexport type ProductTranslationOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type ProductTranslationUpdateManyWithoutProductInput = {\n  create?: Maybe<Array<ProductTranslationCreateWithoutProductInput>>;\n  set?: Maybe<Array<ProductTranslationUpdateWithoutProductInput>>;\n};\n\nexport type ProductTranslationUpdateWithoutProductInput = {\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  imageDescription?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  isOriginal?: Maybe<Scalars['Boolean']>;\n  slug: Scalars['String'];\n};\n\nexport type ProductTranslationWhereInput = {\n  nameContains?: Maybe<Scalars['String']>;\n  language?: Maybe<LanguageCode>;\n};\n\nexport type ProductUpdateInput = {\n  status?: Maybe<ProductStatus>;\n  price: Scalars['Int'];\n  measure: Scalars['String'];\n  videoTitle?: Maybe<Scalars['String']>;\n  videoUrl?: Maybe<Scalars['String']>;\n  attribute?: Maybe<ProductAttributeUpdateNestedOneWithoutProductInput>;\n  productToIngredients?: Maybe<ProductToIngredientUpdateNestedManyWithoutProductInput>;\n  brand: BrandCreateOneWithoutProductInput;\n  categories: CategoryUpdateManyWithoutProductInput;\n  barcodes?: Maybe<BarcodeUpdateManyWithoutProductInput>;\n  translations: ProductTranslationUpdateManyWithoutProductInput;\n  thumbnail: ImageUpdateOneWithoutProductInput;\n};\n\nexport type ProductUpdateManyWithoutPostInput = {\n  set?: Maybe<Array<ProductWhereUniqueInput>>;\n};\n\nexport type ProductUpdateOneWithoutEventCommentInput = {\n  connect: ProductWhereUniqueInput;\n};\n\nexport type ProductUpdateOneWithoutLiveStreamProductInput = {\n  connect: ProductWhereUniqueInput;\n};\n\nexport type ProductWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  uid?: Maybe<Scalars['ID']>;\n  status?: Maybe<ProductStatus>;\n  nameContains?: Maybe<Scalars['String']>;\n  price?: Maybe<IntFilter>;\n  updatedAtGte?: Maybe<Scalars['DateTime']>;\n  fansSome?: Maybe<UserWhereInput>;\n  brand?: Maybe<BrandWhereInput>;\n  reviewsSome?: Maybe<ReviewWhereInput>;\n  categoriesSome?: Maybe<CategoryWhereInput>;\n  ingredientsSome?: Maybe<IngredientWhereInput>;\n  shopsSome?: Maybe<ShopWhereInput>;\n  isFunctionalFood?: Maybe<BooleanFilter>;\n  isUsedByViewer?: Maybe<BooleanFilter>;\n};\n\nexport type ProductWhereUniqueInput = {\n  id?: Maybe<Scalars['Int']>;\n  uid?: Maybe<Scalars['ID']>;\n  barcode?: Maybe<Scalars['String']>;\n};\n\nexport type ProductsAggregate = {\n  __typename?: 'ProductsAggregate';\n  count: Scalars['Int'];\n  max: ProductsMax;\n};\n\nexport type ProductsConnection = {\n  __typename?: 'ProductsConnection';\n  aggregate: ProductsAggregate;\n};\n\nexport type ProductsMax = {\n  __typename?: 'ProductsMax';\n  price: Scalars['Float'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  users: Array<User>;\n  user?: Maybe<User>;\n  usersConnection: UsersConnection;\n  medias: Array<MediaEntityUnion>;\n  mediasConnection: MediasConnection;\n  savedMedias: Array<MediaEntityUnion>;\n  savedMediasConnection: SavedMediasConnection;\n  images: Array<Image>;\n  imagesConnection: ImagesConnection;\n  brand?: Maybe<Brand>;\n  brands: Array<Brand>;\n  trendingBrands: Array<Brand>;\n  brandsConnection: BrandsConnection;\n  brandTranslations: Array<BrandTranslation>;\n  casts: Array<Cast>;\n  castsConnection: CastConnection;\n  cast: Cast;\n  castComments: Array<CastComment>;\n  castCommentsConnection: CastCommentsConnection;\n  eventComments: Array<EventComment>;\n  eventCommentsConnection: EventCommentConnection;\n  event?: Maybe<Event>;\n  events: Array<Event>;\n  eventsConnection: EventConnection;\n  tagTranslations: Array<TagTranslation>;\n  postComments: Array<PostComment>;\n  postCommentsConnection: PostCommentsConnection;\n  posts: Array<Post>;\n  post?: Maybe<Post>;\n  postsConnection: PostsConnection;\n  postCategories: Array<PostCategory>;\n  postCommentReports: Array<PostCommentReport>;\n  postCommentReportsConnection: PostCommentReportsConnection;\n  searchProducts: ProductSearchResult;\n  product?: Maybe<Product>;\n  products: Array<Product>;\n  productsConnection: ProductsConnection;\n  productTranslations: Array<ProductTranslation>;\n  productRequests: Array<ProductRequest>;\n  productRequestsConnection: ProductRequestsConnection;\n  reviewReports: Array<ReviewReport>;\n  reviewReportsConnection: ReviewReportsConnection;\n  reviewReport: ReviewReport;\n  reviews: Array<Review>;\n  reviewsConnection: ReviewsConnection;\n  review: Review;\n  checkInList: Array<Scalars['Int']>;\n  pointHistories: Array<PointHistory>;\n  pointHistoriesConnection: PointHistoriesConnection;\n  category?: Maybe<Category>;\n  categories: Array<Category>;\n  categoriesConnection: CategoriesConnection;\n  ingredientsConnection: IngredientsConnection;\n  ingredients: Array<Ingredient>;\n  analyzeIngredients: IngredientSearchResult;\n  ingredient?: Maybe<Ingredient>;\n  cautions: Array<IngredientCaution>;\n  cautionsConnection: IngredientCautionsConnection;\n  caution: IngredientCaution;\n  functions: Array<SpecialIngredientFunction>;\n  functionsConnection: SpecialIngredientFunctionsConnection;\n  function: SpecialIngredientFunction;\n  ingredientTranslations: Array<IngredientTranslation>;\n  functionTranslations: Array<SpecialIngredientFunctionTranslation>;\n  cautionTranslations: Array<IngredientCautionTranslation>;\n  liveStream: LiveStreamOrError;\n  liveStreams: Array<LiveStream>;\n  liveStreamProduct: LiveStreamProduct;\n  liveStreamProducts: Array<LiveStreamProduct>;\n  banners: Array<Banner>;\n  shops: Array<Shop>;\n  shopsConnection: ShopsConnection;\n  shop?: Maybe<Shop>;\n  shopToProducts: Array<ShopToProduct>;\n  shopToProductsConnection: ShopToProductsConnection;\n  cartItems: Array<CartItem>;\n  shippingAddresses: Array<ShippingAddress>;\n  order: OrderOrError;\n  orders: Array<OrderOrError>;\n  ordersConnection: OrdersConnection;\n  feature?: Maybe<Feature>;\n  me: Scalars['Boolean'];\n};\n\n\nexport type QueryUsersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<UserWhereInput>;\n  orderBy?: Maybe<UserOrderByInput>;\n};\n\n\nexport type QueryUserArgs = {\n  where: UserWhereUniqueInput;\n};\n\n\nexport type QueryUsersConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<UserWhereInput>;\n  orderBy?: Maybe<UserOrderByInput>;\n};\n\n\nexport type QueryMediasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where: MediaWhereInput;\n  orderBy?: Maybe<MediaOrderByInput>;\n};\n\n\nexport type QueryMediasConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where: MediaWhereInput;\n  orderBy?: Maybe<MediaOrderByInput>;\n};\n\n\nexport type QuerySavedMediasArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<SavedMediaWhereInput>;\n  orderBy?: Maybe<SavedMediaOrderByInput>;\n};\n\n\nexport type QuerySavedMediasConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<SavedMediaWhereInput>;\n  orderBy?: Maybe<SavedMediaOrderByInput>;\n};\n\n\nexport type QueryImagesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ImageWhereInput>;\n  orderBy?: Maybe<ImageOrderByInput>;\n};\n\n\nexport type QueryImagesConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ImageWhereInput>;\n  orderBy?: Maybe<ImageOrderByInput>;\n};\n\n\nexport type QueryBrandArgs = {\n  where: BrandWhereUniqueInput;\n};\n\n\nexport type QueryBrandsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<BrandWhereInput>;\n  orderBy?: Maybe<BrandOrderByInput>;\n};\n\n\nexport type QueryBrandsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<BrandWhereInput>;\n  orderBy?: Maybe<BrandOrderByInput>;\n};\n\n\nexport type QueryBrandTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<BrandTranslationWhereInput>;\n  orderBy?: Maybe<BrandTranslationOrderByInput>;\n};\n\n\nexport type QueryCastsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<CastWhereInput>;\n  orderBy?: Maybe<CastOrderByInput>;\n};\n\n\nexport type QueryCastsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<CastWhereInput>;\n  orderBy?: Maybe<CastOrderByInput>;\n};\n\n\nexport type QueryCastArgs = {\n  where: CastWhereUniqueInput;\n};\n\n\nexport type QueryCastCommentsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where: CastCommentWhereInput;\n  orderBy?: Maybe<CastCommentOrderByInput>;\n};\n\n\nexport type QueryCastCommentsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where: CastCommentWhereInput;\n  orderBy?: Maybe<CastCommentOrderByInput>;\n};\n\n\nexport type QueryEventCommentsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<EventCommentWhereInput>;\n  orderBy?: Maybe<EventCommentOrderByInput>;\n};\n\n\nexport type QueryEventCommentsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<EventCommentWhereInput>;\n  orderBy?: Maybe<EventCommentOrderByInput>;\n};\n\n\nexport type QueryEventArgs = {\n  where: EventWhereUniqueInput;\n};\n\n\nexport type QueryEventsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<EventWhereInput>;\n  orderBy?: Maybe<EventOrderByInput>;\n};\n\n\nexport type QueryEventsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<EventWhereInput>;\n  orderBy?: Maybe<EventOrderByInput>;\n};\n\n\nexport type QueryTagTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<TagTranslationWhereInput>;\n  orderBy?: Maybe<TagTranslationOrderByInput>;\n};\n\n\nexport type QueryPostCommentsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostCommentWhereInput>;\n  orderBy?: Maybe<PostCommentOrderByInput>;\n};\n\n\nexport type QueryPostCommentsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostCommentWhereInput>;\n  orderBy?: Maybe<PostCommentOrderByInput>;\n};\n\n\nexport type QueryPostsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostWhereInput>;\n  orderBy?: Maybe<Array<PostOrderByInput>>;\n};\n\n\nexport type QueryPostArgs = {\n  where: PostWhereUniqueInput;\n};\n\n\nexport type QueryPostsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostWhereInput>;\n  orderBy?: Maybe<Array<PostOrderByInput>>;\n};\n\n\nexport type QueryPostCategoriesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostCategoryWhereInput>;\n  orderBy?: Maybe<PostCategoryOrderByInput>;\n};\n\n\nexport type QueryPostCommentReportsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostCommentReportWhereInput>;\n  orderBy?: Maybe<PostCommentReportOrderByInput>;\n};\n\n\nexport type QueryPostCommentReportsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostCommentReportWhereInput>;\n  orderBy?: Maybe<PostCommentReportOrderByInput>;\n};\n\n\nexport type QuerySearchProductsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductWhereInput>;\n  text: Scalars['String'];\n};\n\n\nexport type QueryProductArgs = {\n  where: ProductWhereUniqueInput;\n};\n\n\nexport type QueryProductsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductWhereInput>;\n  orderBy?: Maybe<Array<ProductOrderByInput>>;\n};\n\n\nexport type QueryProductsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductWhereInput>;\n  orderBy?: Maybe<Array<ProductOrderByInput>>;\n};\n\n\nexport type QueryProductTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductTranslationWhereInput>;\n  orderBy?: Maybe<ProductTranslationOrderByInput>;\n};\n\n\nexport type QueryProductRequestsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductRequestWhereInput>;\n  orderBy?: Maybe<ProductRequestOrderByInput>;\n};\n\n\nexport type QueryProductRequestsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductRequestWhereInput>;\n  orderBy?: Maybe<ProductRequestOrderByInput>;\n};\n\n\nexport type QueryReviewReportsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewReportWhereInput>;\n  orderBy?: Maybe<ReviewReportOrderByInput>;\n};\n\n\nexport type QueryReviewReportsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewReportWhereInput>;\n  orderBy?: Maybe<ReviewReportOrderByInput>;\n};\n\n\nexport type QueryReviewReportArgs = {\n  where: ReviewReportWhereUniqueInput;\n};\n\n\nexport type QueryReviewsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewWhereInput>;\n  orderBy?: Maybe<ReviewOrderByInput>;\n};\n\n\nexport type QueryReviewsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewWhereInput>;\n  orderBy?: Maybe<ReviewOrderByInput>;\n};\n\n\nexport type QueryReviewArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewWhereInput>;\n  orderBy?: Maybe<ReviewOrderByInput>;\n};\n\n\nexport type QueryPointHistoriesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PointHistoryWhereInput>;\n  orderBy?: Maybe<PointHistoryOrderByInput>;\n};\n\n\nexport type QueryPointHistoriesConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PointHistoryWhereInput>;\n  orderBy?: Maybe<PointHistoryOrderByInput>;\n};\n\n\nexport type QueryCategoryArgs = {\n  where: CategoryWhereUniqueInput;\n};\n\n\nexport type QueryCategoriesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<CategoryWhereInput>;\n  orderBy?: Maybe<CategoryOrderByInput>;\n};\n\n\nexport type QueryCategoriesConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<CategoryWhereInput>;\n  orderBy?: Maybe<CategoryOrderByInput>;\n};\n\n\nexport type QueryIngredientsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientWhereInput>;\n  orderBy?: Maybe<IngredientOrderByInput>;\n};\n\n\nexport type QueryIngredientsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientWhereInput>;\n  orderBy?: Maybe<IngredientOrderByInput>;\n};\n\n\nexport type QueryAnalyzeIngredientsArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type QueryIngredientArgs = {\n  where: IngredientWhereUniqueInput;\n};\n\n\nexport type QueryCautionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientCautionWhereInput>;\n  orderBy?: Maybe<BaseOrderByInput>;\n};\n\n\nexport type QueryCautionsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientCautionWhereInput>;\n  orderBy?: Maybe<BaseOrderByInput>;\n};\n\n\nexport type QueryCautionArgs = {\n  where: CautionWhereUniqueInput;\n};\n\n\nexport type QueryFunctionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<SpecialIngredientFunctionWhereInput>;\n  orderBy?: Maybe<SpecialIngredientFunctionOrderByInput>;\n};\n\n\nexport type QueryFunctionsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<SpecialIngredientFunctionWhereInput>;\n  orderBy?: Maybe<SpecialIngredientFunctionOrderByInput>;\n};\n\n\nexport type QueryFunctionArgs = {\n  where: FunctionWhereUniqueInput;\n};\n\n\nexport type QueryIngredientTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientTranslationWhereInput>;\n  orderBy?: Maybe<IngredientTranslationOrderByInput>;\n};\n\n\nexport type QueryFunctionTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<SpecialIngredientFunctionTranslationWhereInput>;\n  orderBy?: Maybe<BaseOrderByInput>;\n};\n\n\nexport type QueryCautionTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientCautionTranslationWhereInput>;\n  orderBy?: Maybe<BaseOrderByInput>;\n};\n\n\nexport type QueryLiveStreamArgs = {\n  where: LiveStreamWhereUniqueInput;\n};\n\n\nexport type QueryLiveStreamsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<LiveStreamWhereInput>;\n  orderBy?: Maybe<LiveStreamOrderByInput>;\n};\n\n\nexport type QueryLiveStreamProductArgs = {\n  where: LiveStreamProductWhereUniqueInput;\n};\n\n\nexport type QueryLiveStreamProductsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where: LiveStreamProductWhereInput;\n  orderBy?: Maybe<LiveStreamProductOrderByInput>;\n};\n\n\nexport type QueryShopsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ShopWhereInput>;\n  orderBy?: Maybe<ShopOrderByInput>;\n  orderBys?: Maybe<Array<ShopOrderByInput>>;\n};\n\n\nexport type QueryShopsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ShopWhereInput>;\n  orderBy?: Maybe<ShopOrderByInput>;\n  orderBys?: Maybe<Array<ShopOrderByInput>>;\n};\n\n\nexport type QueryShopArgs = {\n  where: ShopWhereUniqueInput;\n};\n\n\nexport type QueryShopToProductsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where: ShopToProductWhereInput;\n  orderBy?: Maybe<ShopToProductOrderByInput>;\n};\n\n\nexport type QueryShopToProductsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where: ShopToProductWhereInput;\n  orderBy?: Maybe<ShopToProductOrderByInput>;\n};\n\n\nexport type QueryCartItemsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<CartItemWhereInput>;\n  orderBy?: Maybe<CartItemOrderByInput>;\n};\n\n\nexport type QueryShippingAddressesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ShippingAddressWhereInput>;\n  orderBy?: Maybe<ShippingAddressOrderByInput>;\n};\n\n\nexport type QueryOrderArgs = {\n  where: OrderWhereUniqueInput;\n};\n\n\nexport type QueryOrdersArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<OrderWhereInput>;\n  orderBy?: Maybe<OrderOrderByInput>;\n  role?: Maybe<Role>;\n};\n\n\nexport type QueryOrdersConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<OrderWhereInput>;\n  orderBy?: Maybe<OrderOrderByInput>;\n  role?: Maybe<Role>;\n};\n\nexport enum ReactStatus {\n  None = 'NONE',\n  Like = 'LIKE',\n  Dislike = 'DISLIKE'\n}\n\nexport type Review = {\n  __typename?: 'Review';\n  id: Scalars['Int'];\n  rate: Scalars['Int'];\n  content: Scalars['String'];\n  isDeleted: Scalars['Boolean'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  status: ReviewStatus;\n  uid: Scalars['ID'];\n  product: Product;\n  user: User;\n  images: Array<Image>;\n  imagesConnection: ReviewImagesConnection;\n  reports?: Maybe<Array<ReviewReport>>;\n  reactionsConnection: ReviewReactionsConnection;\n  reactionOfViewer: ReactStatus;\n  postComments: Array<PostComment>;\n  commentsConnection: PostCommentsConnection;\n  post?: Maybe<Post>;\n  shop?: Maybe<Shop>;\n  reportsConnection: ReviewReportsConnection;\n};\n\n\nexport type ReviewImagesConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ReviewPostCommentsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewWhereInput>;\n  orderBy?: Maybe<ReviewOrderByInput>;\n};\n\n\nexport type ReviewCommentsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostCommentWhereInput>;\n  orderBy?: Maybe<PostCommentOrderByInput>;\n};\n\n\nexport type ReviewReportsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewReportWhereInput>;\n  orderBy?: Maybe<ReviewReportOrderByInput>;\n};\n\nexport type ReviewAvgOrderByInput = {\n  rate?: Maybe<OrderBy>;\n};\n\nexport type ReviewCreateInput = {\n  content: Scalars['String'];\n  rate: Scalars['Int'];\n  product: ProductWhereUniqueInput;\n  images?: Maybe<ImageCreateManyWithoutReviewInput>;\n  shop?: Maybe<ShopCreateOneWithoutReviewsInput>;\n};\n\nexport type ReviewCreateOneWithoutPostCommentsInput = {\n  connect?: Maybe<ReviewWhereUniqueInput>;\n};\n\nexport type ReviewCreateOneWithoutPostInput = {\n  connect?: Maybe<ReviewWhereUniqueInput>;\n};\n\nexport type ReviewCreateOneWithoutReportInput = {\n  connect: ReviewWhereUniqueInput;\n};\n\nexport type ReviewImagesAggregate = {\n  __typename?: 'ReviewImagesAggregate';\n  count: Scalars['Int'];\n};\n\nexport type ReviewImagesConnection = {\n  __typename?: 'ReviewImagesConnection';\n  aggregate: ReviewImagesAggregate;\n};\n\nexport type ReviewOrderByInput = {\n  id?: Maybe<OrderBy>;\n  createdAt?: Maybe<OrderBy>;\n  updatedAt?: Maybe<OrderBy>;\n  reactionsConnection?: Maybe<ReviewReactionsConnectionOrderByInput>;\n};\n\nexport type ReviewReactionsAggregate = {\n  __typename?: 'ReviewReactionsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type ReviewReactionsAggregateOrderByInput = {\n  count?: Maybe<OrderBy>;\n};\n\nexport type ReviewReactionsConnection = {\n  __typename?: 'ReviewReactionsConnection';\n  aggregate: ReviewReactionsAggregate;\n};\n\nexport type ReviewReactionsConnectionOrderByInput = {\n  aggregate?: Maybe<ReviewReactionsAggregateOrderByInput>;\n};\n\nexport type ReviewReport = {\n  __typename?: 'ReviewReport';\n  id: Scalars['Int'];\n  type: ReviewReportType;\n  reason?: Maybe<Scalars['String']>;\n  status: ReviewReportStatus;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  user: User;\n  review: Review;\n};\n\nexport type ReviewReportCreateInput = {\n  type: ReviewReportType;\n  reason?: Maybe<Scalars['String']>;\n  review: ReviewCreateOneWithoutReportInput;\n};\n\nexport type ReviewReportOrderByInput = {\n  id?: Maybe<OrderBy>;\n  createdAt?: Maybe<OrderBy>;\n};\n\nexport enum ReviewReportStatus {\n  Created = 'CREATED',\n  Approved = 'APPROVED',\n  Rejected = 'REJECTED'\n}\n\nexport enum ReviewReportType {\n  NotRelated = 'NOT_RELATED',\n  Repeat = 'REPEAT',\n  Advertising = 'ADVERTISING',\n  Simple = 'SIMPLE',\n  Swearing = 'SWEARING',\n  PersonalInformation = 'PERSONAL_INFORMATION',\n  Other = 'OTHER'\n}\n\nexport type ReviewReportWhereInput = {\n  reasonContains?: Maybe<Scalars['String']>;\n  status?: Maybe<ReviewReportStatus>;\n  user?: Maybe<UserWhereInput>;\n  review?: Maybe<ReviewWhereInput>;\n};\n\nexport type ReviewReportWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type ReviewReportsAggregate = {\n  __typename?: 'ReviewReportsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type ReviewReportsConnection = {\n  __typename?: 'ReviewReportsConnection';\n  aggregate: ReviewReportsAggregate;\n};\n\nexport enum ReviewStatus {\n  Created = 'CREATED',\n  Approved = 'APPROVED',\n  Hidden = 'HIDDEN'\n}\n\nexport type ReviewUpdateInput = {\n  content: Scalars['String'];\n  rate: Scalars['Int'];\n  images?: Maybe<ImageUpdateManyWithoutReviewInput>;\n  shop?: Maybe<ShopUpdateOneWithoutReviewsInput>;\n};\n\nexport type ReviewWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  idIn?: Maybe<Array<Scalars['Int']>>;\n  idIsNull?: Maybe<Scalars['Boolean']>;\n  rateOR?: Maybe<Array<IntFilter>>;\n  contentContains?: Maybe<Scalars['String']>;\n  status?: Maybe<ReviewStatus>;\n  statusIn?: Maybe<Array<ReviewStatus>>;\n  isDeleted?: Maybe<Scalars['Boolean']>;\n  user?: Maybe<UserWhereInput>;\n  product?: Maybe<ProductWhereInput>;\n  shop?: Maybe<ShopWhereInput>;\n};\n\nexport type ReviewWhereUniqueInput = {\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport type ReviewsAggregate = {\n  __typename?: 'ReviewsAggregate';\n  count: Scalars['Int'];\n  avg: ReviewsAvg;\n};\n\nexport type ReviewsAggregateOrderByInput = {\n  count?: Maybe<OrderBy>;\n  avg?: Maybe<ReviewAvgOrderByInput>;\n};\n\nexport type ReviewsAvg = {\n  __typename?: 'ReviewsAvg';\n  rate: Scalars['Float'];\n};\n\nexport type ReviewsConnection = {\n  __typename?: 'ReviewsConnection';\n  aggregate: ReviewsAggregate;\n};\n\nexport type ReviewsConnectionOrderByInput = {\n  aggregate?: Maybe<ReviewsAggregateOrderByInput>;\n};\n\nexport type ReviewsCountByRate = {\n  __typename?: 'ReviewsCountByRate';\n  one?: Maybe<Scalars['Int']>;\n  two?: Maybe<Scalars['Int']>;\n  three?: Maybe<Scalars['Int']>;\n  four?: Maybe<Scalars['Int']>;\n  five?: Maybe<Scalars['Int']>;\n};\n\nexport enum Role {\n  Anonymous = 'ANONYMOUS',\n  User = 'USER',\n  Admin = 'ADMIN',\n  Shop = 'SHOP'\n}\n\nexport type SavedMediaOrderByInput = {\n  createdAt?: Maybe<OrderBy>;\n};\n\nexport type SavedMediaWhereInput = {\n  type?: Maybe<MediaType>;\n  createdAt?: Maybe<DateTimeFilter>;\n};\n\nexport type SavedMediasAggregate = {\n  __typename?: 'SavedMediasAggregate';\n  count: Scalars['Int'];\n};\n\nexport type SavedMediasConnection = {\n  __typename?: 'SavedMediasConnection';\n  aggregate: SavedMediasAggregate;\n};\n\nexport type ShippingAddress = {\n  __typename?: 'ShippingAddress';\n  id: Scalars['Int'];\n  fullName: Scalars['String'];\n  address: Scalars['String'];\n  ward: Scalars['String'];\n  district: Scalars['String'];\n  province: Scalars['String'];\n  country: Scalars['String'];\n  phoneNumber?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  default: Scalars['Boolean'];\n  location?: Maybe<Location>;\n  distance?: Maybe<Scalars['Float']>;\n};\n\n\nexport type ShippingAddressDistanceArgs = {\n  location: LocationInput;\n};\n\nexport type ShippingAddressCreateInput = {\n  fullName: Scalars['String'];\n  address: Scalars['String'];\n  country: Scalars['String'];\n  province: Scalars['String'];\n  district: Scalars['String'];\n  ward: Scalars['String'];\n  phoneNumber?: Maybe<Scalars['String']>;\n  default?: Maybe<Scalars['Boolean']>;\n  longitude?: Maybe<Scalars['Float']>;\n  latitude?: Maybe<Scalars['Float']>;\n};\n\nexport type ShippingAddressCreateOneWithoutOrderInput = {\n  connect: ShippingAddressWhereUniqueInput;\n};\n\nexport type ShippingAddressCreateOneWithoutShopInput = {\n  create: ShippingAddressCreateInput;\n};\n\nexport type ShippingAddressOrError = ShippingAddress | CommonError;\n\nexport type ShippingAddressOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type ShippingAddressUpdateInput = {\n  fullName: Scalars['String'];\n  address: Scalars['String'];\n  country: Scalars['String'];\n  province: Scalars['String'];\n  district: Scalars['String'];\n  ward: Scalars['String'];\n  phoneNumber?: Maybe<Scalars['String']>;\n  default?: Maybe<Scalars['Boolean']>;\n  longitude?: Maybe<Scalars['Float']>;\n  latitude?: Maybe<Scalars['Float']>;\n};\n\nexport type ShippingAddressUpdateOneWithoutShopInput = {\n  create?: Maybe<ShippingAddressCreateInput>;\n  update?: Maybe<ShippingAddressUpdateWithWhereUniqueWithoutShopInput>;\n};\n\nexport type ShippingAddressUpdateWithWhereUniqueWithoutShopInput = {\n  where: ShippingAddressWhereUniqueInput;\n  data: ShippingAddressUpdateWithoutShopInput;\n};\n\nexport type ShippingAddressUpdateWithoutShopInput = {\n  fullName: Scalars['String'];\n  address: Scalars['String'];\n  country: Scalars['String'];\n  province: Scalars['String'];\n  district: Scalars['String'];\n  ward: Scalars['String'];\n  phoneNumber?: Maybe<Scalars['String']>;\n  default?: Maybe<Scalars['Boolean']>;\n  longitude?: Maybe<Scalars['Float']>;\n  latitude?: Maybe<Scalars['Float']>;\n};\n\nexport type ShippingAddressWhereInput = {\n  province?: Maybe<Scalars['String']>;\n  district?: Maybe<Scalars['String']>;\n  user?: Maybe<UserWhereInput>;\n  default?: Maybe<Scalars['Boolean']>;\n  nearBy?: Maybe<NearByInput>;\n};\n\nexport type ShippingAddressWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type Shop = {\n  __typename?: 'Shop';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  status: ShopStatus;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  user: User;\n  cover?: Maybe<Image>;\n  reviewsConnection: ReviewsConnection;\n  pickupAddress?: Maybe<ShippingAddress>;\n  externalLinks?: Maybe<Array<ExternalLink>>;\n};\n\n\nexport type ShopReviewsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewWhereInput>;\n  orderBy?: Maybe<ReviewOrderByInput>;\n};\n\nexport type ShopCreateInput = {\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  cover?: Maybe<ImageCreateOneWithoutShopInput>;\n  avatar?: Maybe<ImageCreateOneWithoutShopInput>;\n  externalLink?: Maybe<ExternalLinkCreateManyWithoutShopInput>;\n  pickupAddress?: Maybe<ShippingAddressCreateOneWithoutShopInput>;\n};\n\nexport type ShopCreateOneWithoutOrderInput = {\n  connect: ShopWhereUniqueInput;\n};\n\nexport type ShopCreateOneWithoutReviewsInput = {\n  connect: ShopWhereUniqueInput;\n};\n\nexport type ShopCreateOneWithoutShopToProductsInput = {\n  connect: ShopWhereUniqueInput;\n};\n\nexport type ShopMutationError = Error & {\n  __typename?: 'ShopMutationError';\n  message: Scalars['String'];\n  status: ErrorStatus;\n  code: ShopMutationErrorCode;\n};\n\nexport enum ShopMutationErrorCode {\n  NameAlreadyInUse = 'NAME_ALREADY_IN_USE',\n  YouAreNotTheOwner = 'YOU_ARE_NOT_THE_OWNER'\n}\n\nexport type ShopOrMutationError = Shop | ShopMutationError | CommonError;\n\nexport type ShopOrderByInput = {\n  id?: Maybe<OrderBy>;\n  updatedAt?: Maybe<OrderBy>;\n  status?: Maybe<OrderBy>;\n};\n\nexport enum ShopStatus {\n  Created = 'CREATED',\n  Approved = 'APPROVED',\n  Blocked = 'BLOCKED'\n}\n\nexport type ShopToProduct = {\n  __typename?: 'ShopToProduct';\n  price?: Maybe<Scalars['Int']>;\n  stockQuantity?: Maybe<Scalars['Int']>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  shop: Shop;\n  product: Product;\n  externalLinks?: Maybe<Array<ExternalLink>>;\n};\n\nexport type ShopToProductCreateInput = {\n  price: Scalars['Int'];\n  stockQuantity?: Maybe<Scalars['Int']>;\n  product: ProductCreateOneWithoutShopToProductsInput;\n  shop: ShopCreateOneWithoutShopToProductsInput;\n  externalLink?: Maybe<ExternalLinkCreateManyWithoutShopToProductInput>;\n};\n\nexport type ShopToProductOrderByInput = {\n  price?: Maybe<OrderBy>;\n  createdAt?: Maybe<OrderBy>;\n};\n\nexport type ShopToProductUpdateInput = {\n  price?: Maybe<Scalars['Int']>;\n  stockQuantity?: Maybe<Scalars['Int']>;\n  externalLink?: Maybe<ExternalLinkUpdateManyWithoutShopToProductInput>;\n};\n\nexport type ShopToProductWhereInput = {\n  shop?: Maybe<ShopWhereInput>;\n  product?: Maybe<ProductWhereInput>;\n  price?: Maybe<IntFilter>;\n  ecommerceSite?: Maybe<EcommerceSite>;\n};\n\nexport type ShopToProductWhereUniqueInput = {\n  product: ProductWhereUniqueInput;\n  shop: ShopWhereUniqueInput;\n};\n\nexport type ShopToProductsAggregate = {\n  __typename?: 'ShopToProductsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type ShopToProductsConnection = {\n  __typename?: 'ShopToProductsConnection';\n  aggregate: ShopToProductsAggregate;\n};\n\nexport type ShopUpdateInput = {\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  cover?: Maybe<ImageUpdateOneWithoutShopInput>;\n  avatar?: Maybe<ImageUpdateOneWithoutShopInput>;\n  externalLink?: Maybe<ExternalLinkUpdateManyWithoutShopInput>;\n  pickupAddress?: Maybe<ShippingAddressUpdateOneWithoutShopInput>;\n};\n\nexport type ShopUpdateOneWithoutReviewsInput = {\n  connect: ShopWhereUniqueInput;\n};\n\nexport type ShopWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  _id?: Maybe<IntFilter>;\n  name?: Maybe<StringFilter>;\n  status?: Maybe<ShopStatus>;\n  ecommerceSite?: Maybe<EcommerceSite>;\n  productsSome?: Maybe<ProductWhereInput>;\n  pickupAddress?: Maybe<ShippingAddressWhereInput>;\n};\n\nexport type ShopWhereUniqueInput = {\n  id: Scalars['Int'];\n};\n\nexport type ShopsAggregate = {\n  __typename?: 'ShopsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type ShopsConnection = {\n  __typename?: 'ShopsConnection';\n  aggregate: ShopsAggregate;\n};\n\nexport enum SkinType {\n  Dry = 'DRY',\n  Oily = 'OILY',\n  Neutral = 'NEUTRAL',\n  Mixed = 'MIXED',\n  Sensitive = 'SENSITIVE'\n}\n\nexport type SpecialIngredientFunction = {\n  __typename?: 'SpecialIngredientFunction';\n  id: Scalars['Int'];\n  symbolUrl?: Maybe<Scalars['String']>;\n  type: SpecialIngredientFunctionType;\n  uid: Scalars['ID'];\n  translations: Array<SpecialIngredientFunctionTranslation>;\n};\n\n\nexport type SpecialIngredientFunctionTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<SpecialIngredientFunctionTranslationWhereInput>;\n  orderBy?: Maybe<BaseOrderByInput>;\n};\n\nexport type SpecialIngredientFunctionOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type SpecialIngredientFunctionTranslation = {\n  __typename?: 'SpecialIngredientFunctionTranslation';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  language: LanguageCode;\n  function: SpecialIngredientFunction;\n};\n\nexport type SpecialIngredientFunctionTranslationWhereInput = {\n  language?: Maybe<LanguageCode>;\n  nameContains?: Maybe<Scalars['String']>;\n};\n\nexport enum SpecialIngredientFunctionType {\n  Advantage = 'ADVANTAGE',\n  Disadvantage = 'DISADVANTAGE',\n  Recommendation = 'RECOMMENDATION'\n}\n\nexport type SpecialIngredientFunctionWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  type?: Maybe<SpecialIngredientFunctionType>;\n  ingredientsSome?: Maybe<IngredientWhereInput>;\n  translationsSome?: Maybe<SpecialIngredientFunctionTranslationWhereInput>;\n};\n\nexport type SpecialIngredientFunctionsAggregate = {\n  __typename?: 'SpecialIngredientFunctionsAggregate';\n  count: Scalars['Int'];\n};\n\nexport type SpecialIngredientFunctionsConnection = {\n  __typename?: 'SpecialIngredientFunctionsConnection';\n  aggregate: SpecialIngredientFunctionsAggregate;\n};\n\nexport type StringBox = {\n  __typename?: 'StringBox';\n  value: Scalars['String'];\n};\n\nexport type StringFilter = {\n  equals?: Maybe<Scalars['String']>;\n  in?: Maybe<Array<Scalars['String']>>;\n  notIn?: Maybe<Array<Scalars['String']>>;\n  lt?: Maybe<Scalars['String']>;\n  lte?: Maybe<Scalars['String']>;\n  gt?: Maybe<Scalars['String']>;\n  gte?: Maybe<Scalars['String']>;\n  contains?: Maybe<Scalars['String']>;\n  startsWith?: Maybe<Scalars['String']>;\n  endsWith?: Maybe<Scalars['String']>;\n  not?: Maybe<StringFilter>;\n};\n\nexport type Tag = {\n  __typename?: 'Tag';\n  id: Scalars['Int'];\n  translations: Array<TagTranslation>;\n};\n\n\nexport type TagTranslationsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<TagTranslationWhereInput>;\n  orderBy?: Maybe<TagTranslationOrderByInput>;\n};\n\nexport type TagCreateManyWithoutEventInput = {\n  connect?: Maybe<Array<TagWhereUniqueInput>>;\n  set?: Maybe<Array<TagWhereUniqueInput>>;\n};\n\nexport type TagTranslation = {\n  __typename?: 'TagTranslation';\n  id: Scalars['Int'];\n  content: Scalars['String'];\n  language: LanguageCode;\n  tag: Tag;\n};\n\nexport type TagTranslationOrderByInput = {\n  id?: Maybe<OrderBy>;\n};\n\nexport type TagTranslationWhereInput = {\n  id?: Maybe<Scalars['Float']>;\n  contentContains?: Maybe<Scalars['String']>;\n  language?: Maybe<LanguageCode>;\n};\n\nexport type TagUpdateManyWithoutEventInput = {\n  connect?: Maybe<Array<TagWhereUniqueInput>>;\n  disconnect?: Maybe<Array<TagWhereUniqueInput>>;\n  set?: Maybe<Array<TagWhereUniqueInput>>;\n};\n\nexport type TagWhereUniqueInput = {\n  id?: Maybe<Scalars['Int']>;\n};\n\nexport enum Unit {\n  Mcg = 'mcg',\n  Mg = 'mg',\n  G = 'g',\n  Ml = 'ml',\n  L = 'l',\n  Kcal = 'kcal',\n  Cal = 'cal',\n  Cfu = 'CFU',\n  Micronutrient = 'micronutrient'\n}\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  email?: Maybe<Scalars['String']>;\n  emailVerified: Scalars['Boolean'];\n  account: Scalars['String'];\n  /** @deprecated use account instead */\n  accountName: Scalars['String'];\n  /** @deprecated This field will be removed in Sep, 2021 */\n  firstName?: Maybe<Scalars['String']>;\n  /** @deprecated This field will be removed in Sep, 2021 */\n  lastName?: Maybe<Scalars['String']>;\n  gender?: Maybe<Gender>;\n  /** @deprecated This field will be replaced by Baumann skin types in Sep, 2021 */\n  skinType: SkinType;\n  baumannSkinType?: Maybe<BaumannSkinType>;\n  baumannAnswers?: Maybe<Array<BaumannAnswer>>;\n  birthYear?: Maybe<Scalars['Int']>;\n  nationality?: Maybe<Scalars['String']>;\n  /** @deprecated This field will be removed in Sep, 2021 */\n  address?: Maybe<Scalars['String']>;\n  phoneNumber?: Maybe<Scalars['String']>;\n  /** @deprecated This field will be removed in Sep, 2021 */\n  zipCode?: Maybe<Scalars['Int']>;\n  isVerified: Scalars['Boolean'];\n  isOfficial?: Maybe<Scalars['Boolean']>;\n  type?: Maybe<AccountType>;\n  uid: Scalars['ID'];\n  referralCode: Scalars['ID'];\n  avatar?: Maybe<Image>;\n  isFollowing?: Maybe<Scalars['Boolean']>;\n  followersConnection: FollowersConnection;\n  followingsConnection: FollowingsConnection;\n  reviewsConnection: ReviewsConnection;\n  reviewReactionsConnection: ReviewReactionsConnection;\n  wishedProductsConnection: ProductsConnection;\n  postsConnection: PostsConnection;\n  totalPoints: Scalars['Int'];\n  redeemablePoints: Scalars['Int'];\n  levelPoints: Scalars['Int'];\n  currentLevel?: Maybe<Level>;\n  nextLevel?: Maybe<Level>;\n  profiles: Array<UserProfile>;\n  shop?: Maybe<Shop>;\n  socialMediaAccounts?: Maybe<Array<OauthProvider>>;\n  createdAt: Scalars['DateTime'];\n  isBlocked: Scalars['Boolean'];\n};\n\n\nexport type UserReviewsConnectionArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewWhereInput>;\n  orderBy?: Maybe<ReviewOrderByInput>;\n};\n\n\nexport type UserProfilesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<UserProfileWhereInput>;\n};\n\nexport type UserDeleteInput = {\n  reason: UserDeleteReason;\n  note?: Maybe<Scalars['String']>;\n};\n\nexport enum UserDeleteReason {\n  InformationIsNotHelpful = 'INFORMATION_IS_NOT_HELPFUL',\n  IngredientAreNotAccurate = 'INGREDIENT_ARE_NOT_ACCURATE',\n  PostsAreUnhelpfulAndOrOffensive = 'POSTS_ARE_UNHELPFUL_AND_OR_OFFENSIVE',\n  ReviewsAreNotHelpful = 'REVIEWS_ARE_NOT_HELPFUL',\n  TakeToMuchEffortToEarnPoints = 'TAKE_TO_MUCH_EFFORT_TO_EARN_POINTS',\n  NeverWinGiveaways = 'NEVER_WIN_GIVEAWAYS',\n  AppIsSlowAndBugs = 'APP_IS_SLOW_AND_BUGS',\n  Other = 'OTHER'\n}\n\nexport type UserOrderByInput = {\n  id?: Maybe<OrderBy>;\n  reviews?: Maybe<ReviewsConnectionOrderByInput>;\n  reviewReactions?: Maybe<ReviewReactionsConnectionOrderByInput>;\n};\n\nexport type UserProfile = {\n  __typename?: 'UserProfile';\n  provider: OauthProvider;\n  externalId: Scalars['String'];\n  displayName: Scalars['String'];\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  userId: Scalars['Int'];\n};\n\nexport type UserProfileWhereInput = {\n  user?: Maybe<UserWhereInput>;\n  provider?: Maybe<OauthProvider>;\n};\n\nexport type UserUpdateInput = {\n  account?: Maybe<Scalars['String']>;\n  gender?: Maybe<Gender>;\n  birthYear?: Maybe<Scalars['Int']>;\n  skinType?: Maybe<SkinType>;\n  baumannSkinType?: Maybe<BaumannSkinType>;\n  fullname?: Maybe<Scalars['String']>;\n  fullName?: Maybe<Scalars['String']>;\n  phoneNumber?: Maybe<Scalars['String']>;\n  address?: Maybe<Scalars['String']>;\n  zipCode?: Maybe<Scalars['Int']>;\n  avatar?: Maybe<ImageUpdateManyWithoutUserInput>;\n};\n\nexport type UserWhereInput = {\n  id?: Maybe<Scalars['Int']>;\n  account?: Maybe<StringFilter>;\n  accountContains?: Maybe<Scalars['String']>;\n  accountStartsWith?: Maybe<Scalars['String']>;\n  followersSome?: Maybe<UserWhereInput>;\n  followingsSome?: Maybe<UserWhereInput>;\n  birthYearOR?: Maybe<Array<IntFilter>>;\n  gender?: Maybe<Gender>;\n  genderIn?: Maybe<Array<Gender>>;\n  skinType?: Maybe<SkinType>;\n  skinTypeIn?: Maybe<Array<SkinType>>;\n  baumannSkinType?: Maybe<BaumannSkinTypeFilter>;\n};\n\nexport type UserWhereUniqueInput = {\n  id?: Maybe<Scalars['Int']>;\n  account?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type UsersAggregate = {\n  __typename?: 'UsersAggregate';\n  count: Scalars['Int'];\n};\n\nexport type UsersConnection = {\n  __typename?: 'UsersConnection';\n  aggregate: UsersAggregate;\n};\n\nexport type Video = {\n  __typename?: 'Video';\n  thumbnail?: Maybe<VideoThumbnail>;\n  details?: Maybe<VideoDetails>;\n  status: VideoStatus;\n};\n\nexport type VideoDetails = {\n  __typename?: 'VideoDetails';\n  url: Scalars['String'];\n  width: Scalars['Int'];\n  height: Scalars['Int'];\n};\n\nexport type VideoDetailsUpdateInput = {\n  url: Scalars['String'];\n  width: Scalars['Int'];\n  height: Scalars['Int'];\n};\n\nexport enum VideoStatus {\n  InProgressing = 'IN_PROGRESSING',\n  Complete = 'COMPLETE',\n  Error = 'ERROR'\n}\n\nexport type VideoThumbnail = {\n  __typename?: 'VideoThumbnail';\n  url: Scalars['String'];\n  width: Scalars['Int'];\n  height: Scalars['Int'];\n};\n\nexport type VideoThumbnailUpdateInput = {\n  url: Scalars['String'];\n  width: Scalars['Int'];\n  height: Scalars['Int'];\n};\n\nexport type VideoUpdateOneWithoutPostInput = {\n  update: VideoUpdateWithoutPostInput;\n};\n\nexport type VideoUpdateWithoutPostInput = {\n  thumbnail: VideoThumbnailUpdateInput;\n  details: VideoDetailsUpdateInput;\n};\n\nexport type VideoWhereInput = {\n  nonNull?: Maybe<Scalars['Boolean']>;\n  status?: Maybe<VideoStatus>;\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = { __typename?: 'Mutation', login: { __typename?: 'AuthPayload', token: string } };\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = { __typename?: 'Query', me: boolean };\n\nexport type CreateBannersMutationVariables = Exact<{\n  data: Array<BannerInput> | BannerInput;\n}>;\n\n\nexport type CreateBannersMutation = { __typename?: 'Mutation', createBanners: boolean };\n\nexport type GetBannerListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetBannerListQuery = { __typename?: 'Query', banners: Array<{ __typename?: 'Banner', liveStreamId: number, thumbnailUrl: string }> };\n\nexport type CreateBrandMutationVariables = Exact<{\n  data: BrandCreateInput;\n}>;\n\n\nexport type CreateBrandMutation = { __typename?: 'Mutation', createBrand: { __typename?: 'Brand', id: number } };\n\nexport type GetBrandDetailsQueryVariables = Exact<{\n  where: BrandWhereUniqueInput;\n}>;\n\n\nexport type GetBrandDetailsQuery = { __typename?: 'Query', brand?: Maybe<{ __typename?: 'Brand', id: number, uid: string, logoUrl: string, coo?: Maybe<string>, status: BrandStatus, smallLogoUrl?: Maybe<string>, translations: Array<{ __typename?: 'BrandTranslation', id: number, name: string, description?: Maybe<string>, slug?: Maybe<string> }>, types: Array<{ __typename?: 'BrandType', id: string, value: BrandTypeValue }> }> };\n\nexport type GetBrandListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<BrandWhereInput>;\n  orderBy?: Maybe<BrandOrderByInput>;\n}>;\n\n\nexport type GetBrandListQuery = { __typename?: 'Query', brands: Array<{ __typename?: 'Brand', id: number, logoUrl: string, status: BrandStatus, smallLogoUrl?: Maybe<string>, translations: Array<{ __typename?: 'BrandTranslation', name: string }> }>, brandsConnection: { __typename?: 'BrandsConnection', aggregate: { __typename?: 'BrandsAggregate', count: number } } };\n\nexport type BrandListFieldsFragment = { __typename?: 'Brand', id: number, logoUrl: string, status: BrandStatus, smallLogoUrl?: Maybe<string>, translations: Array<{ __typename?: 'BrandTranslation', name: string }> };\n\nexport type SearchBrandsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<BrandWhereInput>;\n  orderBy?: Maybe<BrandOrderByInput>;\n}>;\n\n\nexport type SearchBrandsQuery = { __typename?: 'Query', brands: Array<{ __typename?: 'Brand', id: number, translations: Array<{ __typename?: 'BrandTranslation', name: string }> }> };\n\nexport type UpdateBrandMutationVariables = Exact<{\n  where: BrandWhereUniqueInput;\n  data: BrandUpdateInput;\n}>;\n\n\nexport type UpdateBrandMutation = { __typename?: 'Mutation', updateBrand: { __typename?: 'Brand', id: number } };\n\nexport type CreateCategoryMutationVariables = Exact<{\n  data: CategoryCreateInput;\n}>;\n\n\nexport type CreateCategoryMutation = { __typename?: 'Mutation', createCategory: { __typename?: 'Category', id: number } };\n\nexport type GetCategoryDetailsQueryVariables = Exact<{\n  where: CategoryWhereUniqueInput;\n}>;\n\n\nexport type GetCategoryDetailsQuery = { __typename?: 'Query', category?: Maybe<{ __typename?: 'Category', id: number, status: CategoryStatus, parent?: Maybe<{ __typename?: 'Category', id: number, translations: Array<{ __typename?: 'CategoryTranslation', name: string }> }>, activeLogo?: Maybe<{ __typename?: 'Image', id: number, name: string, url: string, width?: Maybe<number>, height?: Maybe<number> }>, inactiveLogo?: Maybe<{ __typename?: 'Image', id: number, name: string, url: string, width?: Maybe<number>, height?: Maybe<number> }>, translations: Array<{ __typename?: 'CategoryTranslation', id: number, name: string, slug?: Maybe<string>, isOriginal: boolean, language: LanguageCode }> }> };\n\nexport type GetCategoryListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<CategoryWhereInput>;\n  orderBy?: Maybe<CategoryOrderByInput>;\n}>;\n\n\nexport type GetCategoryListQuery = { __typename?: 'Query', categories: Array<{ __typename?: 'Category', id: number, status: CategoryStatus, parent?: Maybe<{ __typename?: 'Category', id: number, translations: Array<{ __typename?: 'CategoryTranslation', name: string }> }>, translations: Array<{ __typename?: 'CategoryTranslation', name: string }> }>, categoriesConnection: { __typename?: 'CategoriesConnection', aggregate: { __typename?: 'CategoriesAggregate', count: number } } };\n\nexport type GetHierarchicalCategoriesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetHierarchicalCategoriesQuery = { __typename?: 'Query', categories: Array<{ __typename?: 'Category', id: number, translations: Array<{ __typename?: 'CategoryTranslation', name: string }>, children?: Maybe<Array<{ __typename?: 'Category', id: number, translations: Array<{ __typename?: 'CategoryTranslation', name: string }> }>> }> };\n\nexport type UpdateCategoryMutationVariables = Exact<{\n  where: CategoryWhereUniqueInput;\n  data: CategoryUpdateInput;\n}>;\n\n\nexport type UpdateCategoryMutation = { __typename?: 'Mutation', updateCategory: { __typename?: 'Category', id: number } };\n\nexport type AwardEventCommentMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type AwardEventCommentMutation = { __typename?: 'Mutation', awardEventComment: { __typename?: 'EventComment', id: number } };\n\nexport type AwardEventCommentsMutationVariables = Exact<{\n  data: EventCommentUpdateManyWithoutEventInput;\n}>;\n\n\nexport type AwardEventCommentsMutation = { __typename?: 'Mutation', awardEventComments: boolean };\n\nexport type CreateEventNotificationMutationVariables = Exact<{\n  data: EventNotificationCreateInput;\n}>;\n\n\nexport type CreateEventNotificationMutation = { __typename?: 'Mutation', createEventNotification: { __typename?: 'EventNotification', id: string, title: string, content: string, notifiedAt?: Maybe<any> } };\n\nexport type CreateEventMutationVariables = Exact<{\n  data: EventCreateInput;\n}>;\n\n\nexport type CreateEventMutation = { __typename?: 'Mutation', createEvent: { __typename?: 'Event', id: number } };\n\nexport type DeleteEventNotificationMutationVariables = Exact<{\n  where: EventNotificationWhereUniqueInput;\n}>;\n\n\nexport type DeleteEventNotificationMutation = { __typename?: 'Mutation', deleteEventNotification: { __typename?: 'EventNotification', id: string } };\n\nexport type DeleteEventMutationVariables = Exact<{\n  where: EventWhereUniqueInput;\n}>;\n\n\nexport type DeleteEventMutation = { __typename?: 'Mutation', deleteEvent: { __typename?: 'Event', id: number } };\n\nexport type GetEventCommentsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<EventCommentWhereInput>;\n  orderBy?: Maybe<EventCommentOrderByInput>;\n}>;\n\n\nexport type GetEventCommentsQuery = { __typename?: 'Query', eventComments: Array<{ __typename?: 'EventComment', id: number, content: string, createdAt: any, status: EventCommentStatus, user: { __typename?: 'User', id: number, account: string, phoneNumber?: Maybe<string>, address?: Maybe<string>, gender?: Maybe<Gender>, birthYear?: Maybe<number>, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string }, medium: { __typename?: 'Image', url: string } }> } }>, eventCommentsConnection: { __typename?: 'EventCommentConnection', aggregate: { __typename?: 'EventCommentAggregate', count: number } } };\n\nexport type GetEventDetailsQueryVariables = Exact<{\n  where: EventWhereUniqueInput;\n}>;\n\n\nexport type GetEventDetailsQuery = { __typename?: 'Query', event?: Maybe<{ __typename?: 'Event', id: number, name: string, condition: string, startedAt: any, endedAt: any, coverUrl: string, content: string, visible: boolean, type: EventType, reviewDeadline?: Maybe<any>, numberOfWinners?: Maybe<number>, minimumNumberOfReviews?: Maybe<number>, reminderDates?: Maybe<Array<any>>, points?: Maybe<number>, eventToProducts: Array<{ __typename?: 'EventToProduct', quantity?: Maybe<number>, product: { __typename?: 'Product', id: number, translations: Array<{ __typename?: 'ProductTranslation', name: string, language: LanguageCode }> } }>, tags: Array<{ __typename?: 'Tag', id: number, translations: Array<{ __typename?: 'TagTranslation', content: string, language: LanguageCode }> }>, notifications: Array<{ __typename?: 'EventNotification', id: string, title: string, content: string, notifiedAt?: Maybe<any> }> }> };\n\nexport type GetEventListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<EventWhereInput>;\n  orderBy?: Maybe<EventOrderByInput>;\n}>;\n\n\nexport type GetEventListQuery = { __typename?: 'Query', events: Array<{ __typename?: 'Event', id: number, name: string, startedAt: any, endedAt: any, coverUrl: string, type: EventType, currentNumberOfWinners: number, maximumNumberOfWinners?: Maybe<number>, commentsConnection: { __typename?: 'EventCommentConnection', aggregate: { __typename?: 'EventCommentAggregate', count: number } }, notifications: Array<{ __typename?: 'EventNotification', id: string }> }>, eventsConnection: { __typename?: 'EventConnection', aggregate: { __typename?: 'EventAggregate', count: number } } };\n\nexport type ReclaimEventCommentMutationVariables = Exact<{\n  id: Scalars['Int'];\n  payback: Scalars['Boolean'];\n}>;\n\n\nexport type ReclaimEventCommentMutation = { __typename?: 'Mutation', reclaimEventComment: { __typename?: 'EventComment', id: number } };\n\nexport type UpdateEventNotificationMutationVariables = Exact<{\n  where: EventNotificationWhereUniqueInput;\n  data: EventNotificationUpdateInput;\n}>;\n\n\nexport type UpdateEventNotificationMutation = { __typename?: 'Mutation', updateEventNotification: { __typename?: 'EventNotification', id: string, title: string, content: string, notifiedAt?: Maybe<any> } };\n\nexport type UpdateEventMutationVariables = Exact<{\n  where: EventWhereUniqueInput;\n  data: EventUpdateInput;\n}>;\n\n\nexport type UpdateEventMutation = { __typename?: 'Mutation', updateEvent: { __typename?: 'Event', id: number } };\n\nexport type AnalyzeIngredientsQueryVariables = Exact<{\n  text: Scalars['String'];\n}>;\n\n\nexport type AnalyzeIngredientsQuery = { __typename?: 'Query', analyzeIngredients: { __typename?: 'IngredientSearchResult', total: number, ingredients: Array<Maybe<{ __typename?: 'Ingredient', id: number, ewg?: Maybe<string>, translations: Array<{ __typename?: 'IngredientTranslation', name: string }> }>> } };\n\nexport type CreateCautionMutationVariables = Exact<{\n  data: CautionCreateInput;\n}>;\n\n\nexport type CreateCautionMutation = { __typename?: 'Mutation', createCaution: { __typename?: 'IngredientCaution', id: number } };\n\nexport type CreateFunctionMutationVariables = Exact<{\n  data: FunctionCreateInput;\n}>;\n\n\nexport type CreateFunctionMutation = { __typename?: 'Mutation', createFunction: { __typename?: 'SpecialIngredientFunction', id: number } };\n\nexport type CreateIngredientMutationVariables = Exact<{\n  data: IngredientCreateInput;\n}>;\n\n\nexport type CreateIngredientMutation = { __typename?: 'Mutation', createIngredient: { __typename?: 'Ingredient', id: number } };\n\nexport type GetCautionDetailsQueryVariables = Exact<{\n  where: CautionWhereUniqueInput;\n}>;\n\n\nexport type GetCautionDetailsQuery = { __typename?: 'Query', caution: { __typename?: 'IngredientCaution', id: number, translations: Array<{ __typename?: 'IngredientCautionTranslation', id: number, name: string, description?: Maybe<string>, language: LanguageCode }> } };\n\nexport type CautionDetailsFragment = { __typename?: 'IngredientCaution', id: number, translations: Array<{ __typename?: 'IngredientCautionTranslation', id: number, name: string, description?: Maybe<string>, language: LanguageCode }> };\n\nexport type GetCautionListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientCautionWhereInput>;\n  orderBy?: Maybe<BaseOrderByInput>;\n}>;\n\n\nexport type GetCautionListQuery = { __typename?: 'Query', cautions: Array<{ __typename?: 'IngredientCaution', id: number, translations: Array<{ __typename?: 'IngredientCautionTranslation', id: number, name: string, description?: Maybe<string>, language: LanguageCode }> }>, cautionsConnection: { __typename?: 'IngredientCautionsConnection', aggregate: { __typename?: 'IngredientCautionsAggregate', count: number } } };\n\nexport type GetFunctionDetailsQueryVariables = Exact<{\n  where: FunctionWhereUniqueInput;\n}>;\n\n\nexport type GetFunctionDetailsQuery = { __typename?: 'Query', function: { __typename?: 'SpecialIngredientFunction', id: number, type: SpecialIngredientFunctionType, symbolUrl?: Maybe<string>, translations: Array<{ __typename?: 'SpecialIngredientFunctionTranslation', id: number, name: string, language: LanguageCode, description?: Maybe<string> }> } };\n\nexport type FunctionDetailsFragment = { __typename?: 'SpecialIngredientFunction', id: number, type: SpecialIngredientFunctionType, symbolUrl?: Maybe<string>, translations: Array<{ __typename?: 'SpecialIngredientFunctionTranslation', id: number, name: string, language: LanguageCode, description?: Maybe<string> }> };\n\nexport type GetFunctionListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<SpecialIngredientFunctionWhereInput>;\n  orderBy?: Maybe<SpecialIngredientFunctionOrderByInput>;\n}>;\n\n\nexport type GetFunctionListQuery = { __typename?: 'Query', functions: Array<{ __typename?: 'SpecialIngredientFunction', id: number, symbolUrl?: Maybe<string>, type: SpecialIngredientFunctionType, translations: Array<{ __typename?: 'SpecialIngredientFunctionTranslation', id: number, name: string, description?: Maybe<string> }> }>, functionsConnection: { __typename?: 'SpecialIngredientFunctionsConnection', aggregate: { __typename?: 'SpecialIngredientFunctionsAggregate', count: number } } };\n\nexport type GetIngredientDetailsQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type GetIngredientDetailsQuery = { __typename?: 'Query', ingredient?: Maybe<{ __typename?: 'Ingredient', id: number, ewg?: Maybe<string>, ewgRiskType?: Maybe<EwgRiskType>, attributes?: Maybe<{ __typename?: 'IngredientAttribute', rdi?: Maybe<number>, rdiUnit?: Maybe<Unit> }>, translations: Array<{ __typename?: 'IngredientTranslation', id: number, language: LanguageCode, name: string, description?: Maybe<string>, effect?: Maybe<string>, dose?: Maybe<string>, exceedDose?: Maybe<string>, pregnant?: Maybe<string>, combination?: Maybe<string>, notCombination?: Maybe<string>, notableCase?: Maybe<string>, attention?: Maybe<string> }>, cautions?: Maybe<Array<{ __typename?: 'IngredientCaution', id: number, translations: Array<{ __typename?: 'IngredientCautionTranslation', id: number, name: string, language: LanguageCode }> }>>, specialFunctions?: Maybe<Array<{ __typename?: 'SpecialIngredientFunction', id: number, type: SpecialIngredientFunctionType, symbolUrl?: Maybe<string>, translations: Array<{ __typename?: 'SpecialIngredientFunctionTranslation', id: number, name: string, language: LanguageCode }> }>> }> };\n\nexport type IngredientDetailsFragment = { __typename?: 'Ingredient', id: number, ewg?: Maybe<string>, ewgRiskType?: Maybe<EwgRiskType>, attributes?: Maybe<{ __typename?: 'IngredientAttribute', rdi?: Maybe<number>, rdiUnit?: Maybe<Unit> }>, translations: Array<{ __typename?: 'IngredientTranslation', id: number, language: LanguageCode, name: string, description?: Maybe<string>, effect?: Maybe<string>, dose?: Maybe<string>, exceedDose?: Maybe<string>, pregnant?: Maybe<string>, combination?: Maybe<string>, notCombination?: Maybe<string>, notableCase?: Maybe<string>, attention?: Maybe<string> }>, cautions?: Maybe<Array<{ __typename?: 'IngredientCaution', id: number, translations: Array<{ __typename?: 'IngredientCautionTranslation', id: number, name: string, language: LanguageCode }> }>>, specialFunctions?: Maybe<Array<{ __typename?: 'SpecialIngredientFunction', id: number, type: SpecialIngredientFunctionType, symbolUrl?: Maybe<string>, translations: Array<{ __typename?: 'SpecialIngredientFunctionTranslation', id: number, name: string, language: LanguageCode }> }>> };\n\nexport type GetIngredientListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientWhereInput>;\n  orderBy?: Maybe<IngredientOrderByInput>;\n}>;\n\n\nexport type GetIngredientListQuery = { __typename?: 'Query', ingredients: Array<{ __typename?: 'Ingredient', id: number, ewg?: Maybe<string>, ewgRiskType?: Maybe<EwgRiskType>, cautions?: Maybe<Array<{ __typename?: 'IngredientCaution', id: number, translations: Array<{ __typename?: 'IngredientCautionTranslation', name: string }> }>>, translations: Array<{ __typename?: 'IngredientTranslation', name: string, language: LanguageCode }>, specialFunctions?: Maybe<Array<{ __typename?: 'SpecialIngredientFunction', id: number, type: SpecialIngredientFunctionType, symbolUrl?: Maybe<string>, translations: Array<{ __typename?: 'SpecialIngredientFunctionTranslation', name: string }> }>> }>, ingredientsConnection: { __typename?: 'IngredientsConnection', aggregate: { __typename?: 'IngredientsAggregate', count: number } } };\n\nexport type IngredientCompactFieldsFragment = { __typename?: 'Ingredient', id: number, ewg?: Maybe<string>, ewgRiskType?: Maybe<EwgRiskType>, cautions?: Maybe<Array<{ __typename?: 'IngredientCaution', id: number, translations: Array<{ __typename?: 'IngredientCautionTranslation', name: string }> }>>, translations: Array<{ __typename?: 'IngredientTranslation', name: string, language: LanguageCode }>, specialFunctions?: Maybe<Array<{ __typename?: 'SpecialIngredientFunction', id: number, type: SpecialIngredientFunctionType, symbolUrl?: Maybe<string>, translations: Array<{ __typename?: 'SpecialIngredientFunctionTranslation', name: string }> }>> };\n\nexport type FunctionFieldsFragment = { __typename?: 'SpecialIngredientFunction', id: number, type: SpecialIngredientFunctionType, symbolUrl?: Maybe<string>, translations: Array<{ __typename?: 'SpecialIngredientFunctionTranslation', name: string }> };\n\nexport type SearchCautionTranslationsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientCautionTranslationWhereInput>;\n  orderBy?: Maybe<BaseOrderByInput>;\n}>;\n\n\nexport type SearchCautionTranslationsQuery = { __typename?: 'Query', cautionTranslations: Array<{ __typename?: 'IngredientCautionTranslation', id: number, name: string, language: LanguageCode, caution: { __typename?: 'IngredientCaution', id: number } }> };\n\nexport type SearchCautionTranslationFragment = { __typename?: 'IngredientCautionTranslation', id: number, name: string, language: LanguageCode, caution: { __typename?: 'IngredientCaution', id: number } };\n\nexport type SearchFunctionTranslationsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<SpecialIngredientFunctionTranslationWhereInput>;\n  orderBy?: Maybe<BaseOrderByInput>;\n}>;\n\n\nexport type SearchFunctionTranslationsQuery = { __typename?: 'Query', functionTranslations: Array<{ __typename?: 'SpecialIngredientFunctionTranslation', id: number, name: string, language: LanguageCode, function: { __typename?: 'SpecialIngredientFunction', id: number, symbolUrl?: Maybe<string>, type: SpecialIngredientFunctionType } }> };\n\nexport type SearchFunctionTranslationFragment = { __typename?: 'SpecialIngredientFunctionTranslation', id: number, name: string, language: LanguageCode, function: { __typename?: 'SpecialIngredientFunction', id: number, symbolUrl?: Maybe<string>, type: SpecialIngredientFunctionType } };\n\nexport type SearchIngredientTranslationsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<IngredientTranslationWhereInput>;\n  orderBy?: Maybe<IngredientTranslationOrderByInput>;\n}>;\n\n\nexport type SearchIngredientTranslationsQuery = { __typename?: 'Query', ingredientTranslations: Array<{ __typename?: 'IngredientTranslation', id: number, name: string, ingredient: { __typename?: 'Ingredient', id: number } }> };\n\nexport type SearchIngredientTranslationFragment = { __typename?: 'IngredientTranslation', id: number, name: string, ingredient: { __typename?: 'Ingredient', id: number } };\n\nexport type UpdateCautionMutationVariables = Exact<{\n  where: CautionWhereUniqueInput;\n  data: CautionUpdateInput;\n}>;\n\n\nexport type UpdateCautionMutation = { __typename?: 'Mutation', updateCaution: { __typename?: 'IngredientCaution', id: number } };\n\nexport type UpdateFunctionMutationVariables = Exact<{\n  where: FunctionWhereUniqueInput;\n  data: FunctionUpdateInput;\n}>;\n\n\nexport type UpdateFunctionMutation = { __typename?: 'Mutation', updateFunction: { __typename?: 'SpecialIngredientFunction', id: number } };\n\nexport type UpdateIngredientMutationVariables = Exact<{\n  where: IngredientWhereUniqueInput;\n  data: IngredientUpdateInput;\n}>;\n\n\nexport type UpdateIngredientMutation = { __typename?: 'Mutation', updateIngredient: { __typename?: 'Ingredient', id: number } };\n\nexport type ApprovePostCommentReportMutationVariables = Exact<{\n  where: PostCommentReportWhereUniqueInput;\n}>;\n\n\nexport type ApprovePostCommentReportMutation = { __typename?: 'Mutation', approvePostCommentReport: { __typename?: 'PostCommentReport', id: number } };\n\nexport type ApprovePostMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type ApprovePostMutation = { __typename?: 'Mutation', approvePost: { __typename?: 'Post', id: number } };\n\nexport type GetPostCommentReportListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostCommentReportWhereInput>;\n  orderBy?: Maybe<PostCommentReportOrderByInput>;\n}>;\n\n\nexport type GetPostCommentReportListQuery = { __typename?: 'Query', postCommentReports: Array<{ __typename?: 'PostCommentReport', id: number, type: PostCommentReportType, reason?: Maybe<string>, createdAt: any, updatedAt: any, postComment: { __typename?: 'PostComment', id: number, content?: Maybe<string>, status: PostCommentStatus, createdAt: any, updatedAt: any, post: { __typename?: 'Post', author: { __typename?: 'User', id: number, account: string } }, author: { __typename?: 'User', id: number, account: string, email?: Maybe<string>, avatar?: Maybe<{ __typename?: 'Image', url: string }> } }, user: { __typename?: 'User', account: string, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> } }>, postCommentReportsConnection: { __typename?: 'PostCommentReportsConnection', aggregate: { __typename?: 'PostCommentReportsAggregate', count: number } } };\n\nexport type PostCommentReportFieldFragment = { __typename?: 'PostCommentReport', id: number, type: PostCommentReportType, reason?: Maybe<string>, createdAt: any, updatedAt: any, postComment: { __typename?: 'PostComment', id: number, content?: Maybe<string>, status: PostCommentStatus, createdAt: any, updatedAt: any, post: { __typename?: 'Post', author: { __typename?: 'User', id: number, account: string } }, author: { __typename?: 'User', id: number, account: string, email?: Maybe<string>, avatar?: Maybe<{ __typename?: 'Image', url: string }> } }, user: { __typename?: 'User', account: string, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> } };\n\nexport type PostCommentFieldsFragment = { __typename?: 'PostComment', id: number, content?: Maybe<string>, status: PostCommentStatus, createdAt: any, updatedAt: any, post: { __typename?: 'Post', author: { __typename?: 'User', id: number, account: string } }, author: { __typename?: 'User', id: number, account: string, email?: Maybe<string>, avatar?: Maybe<{ __typename?: 'Image', url: string }> } };\n\nexport type GetPostListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<PostWhereInput>;\n  orderBy?: Maybe<Array<PostOrderByInput> | PostOrderByInput>;\n}>;\n\n\nexport type GetPostListQuery = { __typename?: 'Query', posts: Array<{ __typename?: 'Post', id: number, content?: Maybe<string>, status: PostStatus, createdAt: any, updatedAt: any, author: { __typename?: 'User', account: string, birthYear?: Maybe<number>, skinType: SkinType, gender?: Maybe<Gender>, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> }, category?: Maybe<{ __typename?: 'PostCategory', translations: Array<{ __typename?: 'PostCategoryTranslation', name: string }> }>, images: Array<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string }, large: { __typename?: 'Image', url: string } }>, products: Array<{ __typename?: 'Product', price?: Maybe<number>, measure: string, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }>, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, reviewsConnection: { __typename?: 'ReviewsConnection', aggregate: { __typename?: 'ReviewsAggregate', count: number, avg: { __typename?: 'ReviewsAvg', rate: number } } } }>, reactionsConnection: { __typename?: 'PostReactionsConnection', aggregate: { __typename?: 'PostReactionsAggregate', sum: { __typename?: 'PostReactionsSum', value: number } } }, commentsConnection: { __typename?: 'PostCommentsConnection', aggregate: { __typename?: 'PostCommentsAggregate', count: number } } }>, postsConnection: { __typename?: 'PostsConnection', aggregate: { __typename?: 'PostsAggregate', count: number } } };\n\nexport type PostCardFragment = { __typename?: 'Post', id: number, content?: Maybe<string>, status: PostStatus, createdAt: any, updatedAt: any, author: { __typename?: 'User', account: string, birthYear?: Maybe<number>, skinType: SkinType, gender?: Maybe<Gender>, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> }, category?: Maybe<{ __typename?: 'PostCategory', translations: Array<{ __typename?: 'PostCategoryTranslation', name: string }> }>, images: Array<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string }, large: { __typename?: 'Image', url: string } }>, products: Array<{ __typename?: 'Product', price?: Maybe<number>, measure: string, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }>, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, reviewsConnection: { __typename?: 'ReviewsConnection', aggregate: { __typename?: 'ReviewsAggregate', count: number, avg: { __typename?: 'ReviewsAvg', rate: number } } } }>, reactionsConnection: { __typename?: 'PostReactionsConnection', aggregate: { __typename?: 'PostReactionsAggregate', sum: { __typename?: 'PostReactionsSum', value: number } } }, commentsConnection: { __typename?: 'PostCommentsConnection', aggregate: { __typename?: 'PostCommentsAggregate', count: number } } };\n\nexport type ProductCardFragment = { __typename?: 'Product', price?: Maybe<number>, measure: string, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }>, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, reviewsConnection: { __typename?: 'ReviewsConnection', aggregate: { __typename?: 'ReviewsAggregate', count: number, avg: { __typename?: 'ReviewsAvg', rate: number } } } };\n\nexport type GetVideoPostListQueryVariables = Exact<{\n  where?: Maybe<PostWhereInput>;\n  orderBy?: Maybe<Array<PostOrderByInput> | PostOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetVideoPostListQuery = { __typename?: 'Query', posts: Array<{ __typename?: 'Post', id: number, content?: Maybe<string>, status: PostStatus, author: { __typename?: 'User', id: number, account: string, avatar?: Maybe<{ __typename?: 'Image', url: string, fixed: { __typename?: 'Image', url: string } }> }, video?: Maybe<{ __typename?: 'Video', status: VideoStatus, thumbnail?: Maybe<{ __typename?: 'VideoThumbnail', width: number, height: number, url: string }>, details?: Maybe<{ __typename?: 'VideoDetails', height: number, width: number, url: string }> }>, products: Array<{ __typename?: 'Product', price?: Maybe<number>, measure: string, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }>, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, reviewsConnection: { __typename?: 'ReviewsConnection', aggregate: { __typename?: 'ReviewsAggregate', count: number, avg: { __typename?: 'ReviewsAvg', rate: number } } } }>, reactionsConnection: { __typename?: 'PostReactionsConnection', aggregate: { __typename?: 'PostReactionsAggregate', sum: { __typename?: 'PostReactionsSum', value: number } } }, commentsConnection: { __typename?: 'PostCommentsConnection', aggregate: { __typename?: 'PostCommentsAggregate', count: number } } }>, postsConnection: { __typename?: 'PostsConnection', aggregate: { __typename?: 'PostsAggregate', count: number } } };\n\nexport type VideoCardFragment = { __typename?: 'Post', id: number, content?: Maybe<string>, status: PostStatus, author: { __typename?: 'User', id: number, account: string, avatar?: Maybe<{ __typename?: 'Image', url: string, fixed: { __typename?: 'Image', url: string } }> }, video?: Maybe<{ __typename?: 'Video', status: VideoStatus, thumbnail?: Maybe<{ __typename?: 'VideoThumbnail', width: number, height: number, url: string }>, details?: Maybe<{ __typename?: 'VideoDetails', height: number, width: number, url: string }> }>, products: Array<{ __typename?: 'Product', price?: Maybe<number>, measure: string, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }>, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, reviewsConnection: { __typename?: 'ReviewsConnection', aggregate: { __typename?: 'ReviewsAggregate', count: number, avg: { __typename?: 'ReviewsAvg', rate: number } } } }>, reactionsConnection: { __typename?: 'PostReactionsConnection', aggregate: { __typename?: 'PostReactionsAggregate', sum: { __typename?: 'PostReactionsSum', value: number } } }, commentsConnection: { __typename?: 'PostCommentsConnection', aggregate: { __typename?: 'PostCommentsAggregate', count: number } } };\n\nexport type VideoFieldsFragment = { __typename?: 'Video', status: VideoStatus, thumbnail?: Maybe<{ __typename?: 'VideoThumbnail', width: number, height: number, url: string }>, details?: Maybe<{ __typename?: 'VideoDetails', height: number, width: number, url: string }> };\n\nexport type ProductVideoFieldsFragment = { __typename?: 'Product', price?: Maybe<number>, measure: string, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }>, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, reviewsConnection: { __typename?: 'ReviewsConnection', aggregate: { __typename?: 'ReviewsAggregate', count: number, avg: { __typename?: 'ReviewsAvg', rate: number } } } };\n\nexport type RejectPostCommentReportMutationVariables = Exact<{\n  where: PostCommentReportWhereUniqueInput;\n}>;\n\n\nexport type RejectPostCommentReportMutation = { __typename?: 'Mutation', rejectPostCommentReport: { __typename?: 'PostCommentReport', id: number } };\n\nexport type RejectPostMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type RejectPostMutation = { __typename?: 'Mutation', rejectPost: { __typename?: 'Post', id: number } };\n\nexport type CreateProductMutationVariables = Exact<{\n  data: ProductCreateInput;\n}>;\n\n\nexport type CreateProductMutation = { __typename?: 'Mutation', createProduct: { __typename?: 'Product', uid: string } };\n\nexport type GetProductDetailsQueryVariables = Exact<{\n  where: ProductWhereUniqueInput;\n}>;\n\n\nexport type GetProductDetailsQuery = { __typename?: 'Query', product?: Maybe<{ __typename?: 'Product', id: number, price?: Maybe<number>, measure: string, videoUrl?: Maybe<string>, videoTitle?: Maybe<string>, status: ProductStatus, translations: Array<{ __typename?: 'ProductTranslation', id: number, name: string, description?: Maybe<string>, imageDescription?: Maybe<string>, slug?: Maybe<string> }>, thumbnail?: Maybe<{ __typename?: 'Image', id: number, url: string, name: string, width?: Maybe<number>, height?: Maybe<number>, small: { __typename?: 'Image', url: string } }>, categories: Array<{ __typename?: 'Category', id: number, translations: Array<{ __typename?: 'CategoryTranslation', name: string }> }>, brand: { __typename?: 'Brand', id: number, translations: Array<{ __typename?: 'BrandTranslation', name: string }> }, barcodes: Array<{ __typename?: 'Barcode', id: number, value: string }>, attributes?: Maybe<{ __typename?: 'ProductAttribute', rdi?: Maybe<number>, packagingUnit?: Maybe<PackagingtUnit>, netWeightPerPackage?: Maybe<number>, weightUnit?: Maybe<Unit>, netVolumePerPackage?: Maybe<number>, volumeUnit?: Maybe<Unit>, energyPerPackage?: Maybe<number>, energyUnit?: Maybe<Unit> }>, productToIngredients: Array<{ __typename?: 'ProductToIngredient', attributes?: Maybe<{ __typename?: 'ProductToIngredientAttribute', amount?: Maybe<number>, amountUnit?: Maybe<Unit> }>, ingredient: { __typename?: 'Ingredient', id: number, translations: Array<{ __typename?: 'IngredientTranslation', name: string, language: LanguageCode }> } }> }> };\n\nexport type GetProductListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductWhereInput>;\n  orderBy?: Maybe<Array<ProductOrderByInput> | ProductOrderByInput>;\n}>;\n\n\nexport type GetProductListQuery = { __typename?: 'Query', products: Array<{ __typename?: 'Product', id: number, status: ProductStatus, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, brand: { __typename?: 'Brand', logoUrl: string, smallLogoUrl?: Maybe<string>, translations: Array<{ __typename?: 'BrandTranslation', name: string }> }, categories: Array<{ __typename?: 'Category', translations: Array<{ __typename?: 'CategoryTranslation', name: string }> }>, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> }>, productsConnection: { __typename?: 'ProductsConnection', aggregate: { __typename?: 'ProductsAggregate', count: number } } };\n\nexport type ProductListFieldsFragment = { __typename?: 'Product', id: number, status: ProductStatus, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, brand: { __typename?: 'Brand', logoUrl: string, smallLogoUrl?: Maybe<string>, translations: Array<{ __typename?: 'BrandTranslation', name: string }> }, categories: Array<{ __typename?: 'Category', translations: Array<{ __typename?: 'CategoryTranslation', name: string }> }>, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> };\n\nexport type GetProductRequestsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ProductRequestWhereInput>;\n  orderBy?: Maybe<ProductRequestOrderByInput>;\n}>;\n\n\nexport type GetProductRequestsQuery = { __typename?: 'Query', productRequests: Array<{ __typename?: 'ProductRequest', id: number, isDone: boolean, images?: Maybe<Array<string>>, content: string, createdAt: any, user: { __typename?: 'User', account: string, gender?: Maybe<Gender>, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> } }>, productRequestsConnection: { __typename?: 'ProductRequestsConnection', aggregate: { __typename?: 'ProductRequestsAggregate', count: number } } };\n\nexport type ProductRequestFieldFragment = { __typename?: 'ProductRequest', id: number, isDone: boolean, images?: Maybe<Array<string>>, content: string, createdAt: any, user: { __typename?: 'User', account: string, gender?: Maybe<Gender>, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> } };\n\nexport type SearchProductListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  text: Scalars['String'];\n}>;\n\n\nexport type SearchProductListQuery = { __typename?: 'Query', searchProducts: { __typename?: 'ProductSearchResult', total: number, products: Array<{ __typename?: 'Product', id: number, status: ProductStatus, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, brand: { __typename?: 'Brand', logoUrl: string, smallLogoUrl?: Maybe<string>, translations: Array<{ __typename?: 'BrandTranslation', name: string }> }, categories: Array<{ __typename?: 'Category', translations: Array<{ __typename?: 'CategoryTranslation', name: string }> }>, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> }> } };\n\nexport type SearchProductsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  first?: Maybe<Scalars['Int']>;\n  text: Scalars['String'];\n}>;\n\n\nexport type SearchProductsQuery = { __typename?: 'Query', searchProducts: { __typename?: 'ProductSearchResult', total: number, products: Array<{ __typename?: 'Product', id: number, translations: Array<{ __typename?: 'ProductTranslation', name: string }> }> } };\n\nexport type UpdateProductRequestMutationVariables = Exact<{\n  data: ProductRequestUpdateInput;\n  where: ProductRequestWhereUniqueInput;\n}>;\n\n\nexport type UpdateProductRequestMutation = { __typename?: 'Mutation', updateProductRequest: { __typename?: 'ProductRequest', id: number } };\n\nexport type UpdateProductMutationVariables = Exact<{\n  where: ProductWhereUniqueInput;\n  data: ProductUpdateInput;\n}>;\n\n\nexport type UpdateProductMutation = { __typename?: 'Mutation', updateProduct: { __typename?: 'Product', uid: string } };\n\nexport type ApproveReviewReportMutationVariables = Exact<{\n  where: ReviewReportWhereUniqueInput;\n}>;\n\n\nexport type ApproveReviewReportMutation = { __typename?: 'Mutation', approveReviewReport: { __typename?: 'ReviewReport', id: number } };\n\nexport type ApproveReviewMutationVariables = Exact<{\n  where: ReviewWhereUniqueInput;\n}>;\n\n\nexport type ApproveReviewMutation = { __typename?: 'Mutation', approveReview: { __typename?: 'Review', id: number } };\n\nexport type GetReportsOfReviewQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewReportWhereInput>;\n  orderBy?: Maybe<ReviewReportOrderByInput>;\n}>;\n\n\nexport type GetReportsOfReviewQuery = { __typename?: 'Query', reviewReports: Array<{ __typename?: 'ReviewReport', id: number, type: ReviewReportType, reason?: Maybe<string>, status: ReviewReportStatus, createdAt: any, updatedAt: any, user: { __typename?: 'User', account: string, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> } }> };\n\nexport type ReviewReportListFieldsFragment = { __typename?: 'ReviewReport', id: number, type: ReviewReportType, reason?: Maybe<string>, status: ReviewReportStatus, createdAt: any, updatedAt: any, user: { __typename?: 'User', account: string, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> } };\n\nexport type GetReviewListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewWhereInput>;\n  orderBy?: Maybe<ReviewOrderByInput>;\n}>;\n\n\nexport type GetReviewListQuery = { __typename?: 'Query', reviews: Array<{ __typename?: 'Review', id: number, content: string, rate: number, status: ReviewStatus, createdAt: any, updatedAt: any, product: { __typename?: 'Product', id: number, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }>, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, brand: { __typename?: 'Brand', translations: Array<{ __typename?: 'BrandTranslation', name: string }> } }, user: { __typename?: 'User', id: number, account: string, email?: Maybe<string>, avatar?: Maybe<{ __typename?: 'Image', url: string }> }, images: Array<{ __typename?: 'Image', name: string, url: string, width?: Maybe<number>, height?: Maybe<number>, small: { __typename?: 'Image', url: string }, large: { __typename?: 'Image', url: string } }>, reportsConnection: { __typename?: 'ReviewReportsConnection', aggregate: { __typename?: 'ReviewReportsAggregate', count: number } } }>, reviewsConnection: { __typename?: 'ReviewsConnection', aggregate: { __typename?: 'ReviewsAggregate', count: number } } };\n\nexport type ReviewListFieldsFragment = { __typename?: 'Review', id: number, content: string, rate: number, status: ReviewStatus, createdAt: any, updatedAt: any, product: { __typename?: 'Product', id: number, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }>, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, brand: { __typename?: 'Brand', translations: Array<{ __typename?: 'BrandTranslation', name: string }> } }, user: { __typename?: 'User', id: number, account: string, email?: Maybe<string>, avatar?: Maybe<{ __typename?: 'Image', url: string }> }, images: Array<{ __typename?: 'Image', name: string, url: string, width?: Maybe<number>, height?: Maybe<number>, small: { __typename?: 'Image', url: string }, large: { __typename?: 'Image', url: string } }>, reportsConnection: { __typename?: 'ReviewReportsConnection', aggregate: { __typename?: 'ReviewReportsAggregate', count: number } } };\n\nexport type GetReviewReportListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ReviewReportWhereInput>;\n  orderBy?: Maybe<ReviewReportOrderByInput>;\n}>;\n\n\nexport type GetReviewReportListQuery = { __typename?: 'Query', reviewReports: Array<{ __typename?: 'ReviewReport', id: number, type: ReviewReportType, reason?: Maybe<string>, status: ReviewReportStatus, createdAt: any, updatedAt: any, review: { __typename?: 'Review', id: number, content: string, rate: number, status: ReviewStatus, createdAt: any, updatedAt: any, product: { __typename?: 'Product', id: number, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }>, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, brand: { __typename?: 'Brand', translations: Array<{ __typename?: 'BrandTranslation', name: string }> } }, user: { __typename?: 'User', id: number, account: string, email?: Maybe<string>, avatar?: Maybe<{ __typename?: 'Image', url: string }> }, images: Array<{ __typename?: 'Image', name: string, url: string, width?: Maybe<number>, height?: Maybe<number>, small: { __typename?: 'Image', url: string }, large: { __typename?: 'Image', url: string } }>, reportsConnection: { __typename?: 'ReviewReportsConnection', aggregate: { __typename?: 'ReviewReportsAggregate', count: number } } }, user: { __typename?: 'User', account: string, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> } }>, reviewReportsConnection: { __typename?: 'ReviewReportsConnection', aggregate: { __typename?: 'ReviewReportsAggregate', count: number } } };\n\nexport type ReportListFieldsWithReviewFragment = { __typename?: 'ReviewReport', id: number, type: ReviewReportType, reason?: Maybe<string>, status: ReviewReportStatus, createdAt: any, updatedAt: any, review: { __typename?: 'Review', id: number, content: string, rate: number, status: ReviewStatus, createdAt: any, updatedAt: any, product: { __typename?: 'Product', id: number, thumbnail?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }>, translations: Array<{ __typename?: 'ProductTranslation', name: string }>, brand: { __typename?: 'Brand', translations: Array<{ __typename?: 'BrandTranslation', name: string }> } }, user: { __typename?: 'User', id: number, account: string, email?: Maybe<string>, avatar?: Maybe<{ __typename?: 'Image', url: string }> }, images: Array<{ __typename?: 'Image', name: string, url: string, width?: Maybe<number>, height?: Maybe<number>, small: { __typename?: 'Image', url: string }, large: { __typename?: 'Image', url: string } }>, reportsConnection: { __typename?: 'ReviewReportsConnection', aggregate: { __typename?: 'ReviewReportsAggregate', count: number } } }, user: { __typename?: 'User', account: string, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> } };\n\nexport type RejectReviewReportMutationVariables = Exact<{\n  where: ReviewReportWhereUniqueInput;\n}>;\n\n\nexport type RejectReviewReportMutation = { __typename?: 'Mutation', rejectReviewReport: { __typename?: 'ReviewReport', id: number } };\n\nexport type RejectReviewMutationVariables = Exact<{\n  where: ReviewWhereUniqueInput;\n}>;\n\n\nexport type RejectReviewMutation = { __typename?: 'Mutation', rejectReview: { __typename?: 'Review', id: number } };\n\nexport type ApproveShopMutationVariables = Exact<{\n  where: ShopWhereUniqueInput;\n}>;\n\n\nexport type ApproveShopMutation = { __typename?: 'Mutation', approveShop: { __typename?: 'Shop', id: number } };\n\nexport type BlockShopMutationVariables = Exact<{\n  where: ShopWhereUniqueInput;\n  reason: Scalars['String'];\n}>;\n\n\nexport type BlockShopMutation = { __typename?: 'Mutation', blockShop: { __typename?: 'Shop', id: number } };\n\nexport type GetShopDetailsQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type GetShopDetailsQuery = { __typename?: 'Query', shop?: Maybe<{ __typename?: 'Shop', id: number, name: string, description?: Maybe<string>, status: ShopStatus, createdAt: any, updatedAt: any, pickupAddress?: Maybe<{ __typename?: 'ShippingAddress', address: string, ward: string, district: string, province: string, country: string }>, user: { __typename?: 'User', id: number, account: string, email?: Maybe<string>, avatar?: Maybe<{ __typename?: 'Image', url: string, small: { __typename?: 'Image', url: string } }> }, cover?: Maybe<{ __typename?: 'Image', id: number, url: string, medium: { __typename?: 'Image', url: string } }>, externalLinks?: Maybe<Array<{ __typename?: 'ExternalLink', title: string, url: string, image?: Maybe<{ __typename?: 'Image', url: string }> }>> }> };\n\nexport type GetShopListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<ShopWhereInput>;\n  orderBy?: Maybe<ShopOrderByInput>;\n  orderBys?: Maybe<Array<ShopOrderByInput> | ShopOrderByInput>;\n}>;\n\n\nexport type GetShopListQuery = { __typename?: 'Query', shops: Array<{ __typename?: 'Shop', id: number, name: string, status: ShopStatus, createdAt: any, user: { __typename?: 'User', id: number, email?: Maybe<string>, isOfficial?: Maybe<boolean>, type?: Maybe<AccountType>, avatar?: Maybe<{ __typename?: 'Image', url: string, fixed: { __typename?: 'Image', url: string } }> } }>, shopsConnection: { __typename?: 'ShopsConnection', aggregate: { __typename?: 'ShopsAggregate', count: number } } };\n\nexport type UploadShopToProductsMutationVariables = Exact<{\n  data: Array<ShopToProductCreateInput> | ShopToProductCreateInput;\n}>;\n\n\nexport type UploadShopToProductsMutation = { __typename?: 'Mutation', uploadShopToProducts: Array<{ __typename?: 'ShopToProduct', price?: Maybe<number> }> };\n\nexport type SearchTagTranslationsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<TagTranslationWhereInput>;\n  orderBy?: Maybe<TagTranslationOrderByInput>;\n}>;\n\n\nexport type SearchTagTranslationsQuery = { __typename?: 'Query', tagTranslations: Array<{ __typename?: 'TagTranslation', id: number, content: string, tag: { __typename?: 'Tag', id: number } }> };\n\nexport type GetUserDetailsQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type GetUserDetailsQuery = { __typename?: 'Query', user?: Maybe<{ __typename?: 'User', id: number, email?: Maybe<string>, account: string, gender?: Maybe<Gender>, birthYear?: Maybe<number>, baumannSkinType?: Maybe<BaumannSkinType>, isOfficial?: Maybe<boolean>, isBlocked: boolean, avatar?: Maybe<{ __typename?: 'Image', url: string, fixed: { __typename?: 'Image', url: string } }> }> };\n\nexport type GetUserListQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<UserWhereInput>;\n  orderBy?: Maybe<UserOrderByInput>;\n}>;\n\n\nexport type GetUserListQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: number, account: string, email?: Maybe<string>, isOfficial?: Maybe<boolean>, createdAt: any, isBlocked: boolean, avatar?: Maybe<{ __typename?: 'Image', url: string, fixed: { __typename?: 'Image', url: string } }> }>, usersConnection: { __typename?: 'UsersConnection', aggregate: { __typename?: 'UsersAggregate', count: number } } };\n\nexport type BlockUserMutationVariables = Exact<{\n  where: UserWhereUniqueInput;\n  isBlocked: Scalars['Boolean'];\n}>;\n\n\nexport type BlockUserMutation = { __typename?: 'Mutation', blockUser: { __typename?: 'User', id: number } };\n\nexport type UpgradeUserMutationVariables = Exact<{\n  where: UserWhereUniqueInput;\n  isOfficial: Scalars['Boolean'];\n}>;\n\n\nexport type UpgradeUserMutation = { __typename?: 'Mutation', upgradeUser: { __typename?: 'User', id: number } };\n\nexport type SearchUsersQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  where?: Maybe<UserWhereInput>;\n}>;\n\n\nexport type SearchUsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: number, account: string }> };\n\nexport type MentionUserFieldsFragment = { __typename?: 'User', id: number, account: string };\n\nexport const BrandListFieldsFragmentDoc = gql`\n    fragment BrandListFields on Brand {\n  id\n  smallLogoUrl: fixedLogoUrl(width: SMALL)\n  logoUrl\n  status\n  translations(where: {language: VI}) {\n    name\n  }\n}\n    `;\nexport const CautionDetailsFragmentDoc = gql`\n    fragment CautionDetails on IngredientCaution {\n  id\n  translations {\n    id\n    name\n    description\n    language\n  }\n}\n    `;\nexport const FunctionDetailsFragmentDoc = gql`\n    fragment FunctionDetails on SpecialIngredientFunction {\n  id\n  type\n  symbolUrl\n  translations {\n    id\n    name\n    language\n    description\n  }\n}\n    `;\nexport const IngredientDetailsFragmentDoc = gql`\n    fragment IngredientDetails on Ingredient {\n  id\n  ewg\n  ewgRiskType\n  attributes {\n    rdi\n    rdiUnit\n  }\n  translations {\n    id\n    language\n    name\n    description\n    effect\n    dose\n    exceedDose\n    pregnant\n    combination\n    notCombination\n    notableCase\n    attention\n  }\n  cautions {\n    id\n    translations(where: {language: VI}) {\n      id\n      name\n      language\n    }\n  }\n  specialFunctions {\n    id\n    type\n    symbolUrl\n    translations(where: {language: VI}) {\n      id\n      name\n      language\n    }\n  }\n}\n    `;\nexport const FunctionFieldsFragmentDoc = gql`\n    fragment FunctionFields on SpecialIngredientFunction {\n  id\n  type\n  symbolUrl\n  translations(where: {language: VI}) {\n    name\n  }\n}\n    `;\nexport const IngredientCompactFieldsFragmentDoc = gql`\n    fragment IngredientCompactFields on Ingredient {\n  id\n  ewg\n  ewgRiskType\n  cautions {\n    id\n    translations(where: {language: VI}) {\n      name\n    }\n  }\n  translations {\n    name\n    language\n  }\n  specialFunctions {\n    ...FunctionFields\n  }\n}\n    ${FunctionFieldsFragmentDoc}`;\nexport const SearchCautionTranslationFragmentDoc = gql`\n    fragment SearchCautionTranslation on IngredientCautionTranslation {\n  id\n  name\n  language\n  caution {\n    id\n  }\n}\n    `;\nexport const SearchFunctionTranslationFragmentDoc = gql`\n    fragment SearchFunctionTranslation on SpecialIngredientFunctionTranslation {\n  id\n  name\n  language\n  function {\n    id\n    symbolUrl\n    type\n  }\n}\n    `;\nexport const SearchIngredientTranslationFragmentDoc = gql`\n    fragment SearchIngredientTranslation on IngredientTranslation {\n  id\n  name\n  ingredient {\n    id\n  }\n}\n    `;\nexport const PostCommentFieldsFragmentDoc = gql`\n    fragment PostCommentFields on PostComment {\n  id\n  content\n  status\n  createdAt\n  updatedAt\n  post {\n    author {\n      id\n      account\n    }\n  }\n  author {\n    id\n    account\n    email\n    avatar {\n      url\n    }\n  }\n}\n    `;\nexport const PostCommentReportFieldFragmentDoc = gql`\n    fragment PostCommentReportField on PostCommentReport {\n  id\n  type\n  reason\n  createdAt\n  updatedAt\n  postComment {\n    ...PostCommentFields\n  }\n  user {\n    account\n    avatar {\n      small: fixed(width: SMALL) {\n        url\n      }\n      url\n    }\n  }\n}\n    ${PostCommentFieldsFragmentDoc}`;\nexport const ProductCardFragmentDoc = gql`\n    fragment ProductCard on Product {\n  price\n  measure\n  thumbnail {\n    small: fixed(width: SMALL) {\n      url\n    }\n    url\n  }\n  translations(where: {language: VI}) {\n    name\n  }\n  reviewsConnection {\n    aggregate {\n      count\n      avg {\n        rate\n      }\n    }\n  }\n}\n    `;\nexport const PostCardFragmentDoc = gql`\n    fragment PostCard on Post {\n  id\n  content\n  status\n  createdAt\n  updatedAt\n  author {\n    account\n    birthYear\n    skinType\n    gender\n    avatar {\n      small: fixed(width: SMALL) {\n        url\n      }\n      url\n    }\n  }\n  category {\n    translations(where: {language: VI}) {\n      name\n    }\n  }\n  images {\n    small: fixed(width: SMALL) {\n      url\n    }\n    large: fixed(width: LARGE) {\n      url\n    }\n    url\n  }\n  products {\n    ...ProductCard\n  }\n  reactionsConnection {\n    aggregate {\n      sum {\n        value\n      }\n    }\n  }\n  commentsConnection {\n    aggregate {\n      count\n    }\n  }\n}\n    ${ProductCardFragmentDoc}`;\nexport const VideoFieldsFragmentDoc = gql`\n    fragment VideoFields on Video {\n  thumbnail {\n    width\n    height\n    url\n  }\n  details {\n    height\n    width\n    url\n  }\n  status\n}\n    `;\nexport const ProductVideoFieldsFragmentDoc = gql`\n    fragment ProductVideoFields on Product {\n  price\n  measure\n  thumbnail {\n    small: fixed(width: SMALL) {\n      url\n    }\n    url\n  }\n  translations(where: {language: VI}) {\n    name\n  }\n  reviewsConnection {\n    aggregate {\n      count\n      avg {\n        rate\n      }\n    }\n  }\n}\n    `;\nexport const VideoCardFragmentDoc = gql`\n    fragment VideoCard on Post {\n  id\n  content\n  status\n  author {\n    id\n    account\n    avatar {\n      url\n      fixed(width: SMALL) {\n        url\n      }\n    }\n  }\n  video {\n    ...VideoFields\n  }\n  products {\n    ...ProductVideoFields\n  }\n  reactionsConnection {\n    aggregate {\n      sum {\n        value\n      }\n    }\n  }\n  commentsConnection {\n    aggregate {\n      count\n    }\n  }\n}\n    ${VideoFieldsFragmentDoc}\n${ProductVideoFieldsFragmentDoc}`;\nexport const ProductListFieldsFragmentDoc = gql`\n    fragment ProductListFields on Product {\n  id\n  status\n  translations(where: {language: VI}) {\n    name\n  }\n  brand {\n    translations(where: {language: VI}) {\n      name\n    }\n    logoUrl\n    smallLogoUrl: fixedLogoUrl(width: SMALL)\n  }\n  categories {\n    translations(where: {language: VI}) {\n      name\n    }\n  }\n  thumbnail {\n    small: fixed(width: SMALL) {\n      url\n    }\n    url\n  }\n}\n    `;\nexport const ProductRequestFieldFragmentDoc = gql`\n    fragment ProductRequestField on ProductRequest {\n  id\n  isDone\n  images\n  content\n  createdAt\n  user {\n    account\n    gender\n    avatar {\n      small: fixed(width: SMALL) {\n        url\n      }\n      url\n    }\n  }\n}\n    `;\nexport const ReviewReportListFieldsFragmentDoc = gql`\n    fragment ReviewReportListFields on ReviewReport {\n  id\n  type\n  reason\n  status\n  createdAt\n  updatedAt\n  user {\n    account\n    avatar {\n      small: fixed(width: SMALL) {\n        url\n      }\n      url\n    }\n  }\n}\n    `;\nexport const ReviewListFieldsFragmentDoc = gql`\n    fragment ReviewListFields on Review {\n  id\n  content\n  rate\n  status\n  createdAt\n  updatedAt\n  product {\n    id\n    thumbnail {\n      small: fixed(width: SMALL) {\n        url\n      }\n      url\n    }\n    translations(where: {language: VI}) {\n      name\n    }\n    brand {\n      translations(where: {language: VI}) {\n        name\n      }\n    }\n  }\n  user {\n    id\n    account\n    email\n    avatar {\n      url\n    }\n  }\n  images {\n    small: fixed(width: SMALL) {\n      url\n    }\n    large: fixed(width: LARGE) {\n      url\n    }\n    name\n    url\n    width\n    height\n  }\n  reportsConnection {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const ReportListFieldsWithReviewFragmentDoc = gql`\n    fragment ReportListFieldsWithReview on ReviewReport {\n  id\n  review {\n    ...ReviewListFields\n  }\n  type\n  reason\n  status\n  createdAt\n  updatedAt\n  user {\n    account\n    avatar {\n      small: fixed(width: SMALL) {\n        url\n      }\n      url\n    }\n  }\n}\n    ${ReviewListFieldsFragmentDoc}`;\nexport const MentionUserFieldsFragmentDoc = gql`\n    fragment MentionUserFields on User {\n  id\n  account\n}\n    `;\nexport const LoginDocument = gql`\n    mutation login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class LoginGQL extends Apollo.Mutation<LoginMutation, LoginMutationVariables> {\n    document = LoginDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const MeDocument = gql`\n    query me {\n  me\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class MeGQL extends Apollo.Query<MeQuery, MeQueryVariables> {\n    document = MeDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateBannersDocument = gql`\n    mutation createBanners($data: [BannerInput!]!) {\n  createBanners(data: $data)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateBannersGQL extends Apollo.Mutation<CreateBannersMutation, CreateBannersMutationVariables> {\n    document = CreateBannersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetBannerListDocument = gql`\n    query getBannerList {\n  banners {\n    liveStreamId\n    thumbnailUrl\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetBannerListGQL extends Apollo.Query<GetBannerListQuery, GetBannerListQueryVariables> {\n    document = GetBannerListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateBrandDocument = gql`\n    mutation createBrand($data: BrandCreateInput!) {\n  createBrand(data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateBrandGQL extends Apollo.Mutation<CreateBrandMutation, CreateBrandMutationVariables> {\n    document = CreateBrandDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetBrandDetailsDocument = gql`\n    query getBrandDetails($where: BrandWhereUniqueInput!) {\n  brand(where: $where) {\n    id\n    uid\n    smallLogoUrl: fixedLogoUrl(width: SMALL)\n    logoUrl\n    coo\n    status\n    translations(where: {language: VI}) {\n      id\n      name\n      description\n      slug\n    }\n    types {\n      id\n      value\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetBrandDetailsGQL extends Apollo.Query<GetBrandDetailsQuery, GetBrandDetailsQueryVariables> {\n    document = GetBrandDetailsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetBrandListDocument = gql`\n    query getBrandList($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: BrandWhereInput, $orderBy: BrandOrderByInput) {\n  brands(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...BrandListFields\n  }\n  brandsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ${BrandListFieldsFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetBrandListGQL extends Apollo.Query<GetBrandListQuery, GetBrandListQueryVariables> {\n    document = GetBrandListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SearchBrandsDocument = gql`\n    query searchBrands($skip: Int = 0, $after: String, $before: String, $first: Int = 10, $last: Int, $where: BrandWhereInput, $orderBy: BrandOrderByInput) {\n  brands(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    id\n    translations(where: {language: VI}) {\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SearchBrandsGQL extends Apollo.Query<SearchBrandsQuery, SearchBrandsQueryVariables> {\n    document = SearchBrandsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateBrandDocument = gql`\n    mutation updateBrand($where: BrandWhereUniqueInput!, $data: BrandUpdateInput!) {\n  updateBrand(where: $where, data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateBrandGQL extends Apollo.Mutation<UpdateBrandMutation, UpdateBrandMutationVariables> {\n    document = UpdateBrandDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateCategoryDocument = gql`\n    mutation createCategory($data: CategoryCreateInput!) {\n  createCategory(data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateCategoryGQL extends Apollo.Mutation<CreateCategoryMutation, CreateCategoryMutationVariables> {\n    document = CreateCategoryDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetCategoryDetailsDocument = gql`\n    query getCategoryDetails($where: CategoryWhereUniqueInput!) {\n  category(where: $where) {\n    id\n    status\n    parent {\n      id\n      translations(where: {language: VI}) {\n        name\n      }\n    }\n    activeLogo {\n      id\n      name\n      url\n      width\n      height\n    }\n    inactiveLogo {\n      id\n      name\n      url\n      width\n      height\n    }\n    translations {\n      id\n      name\n      slug\n      isOriginal\n      language\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetCategoryDetailsGQL extends Apollo.Query<GetCategoryDetailsQuery, GetCategoryDetailsQueryVariables> {\n    document = GetCategoryDetailsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetCategoryListDocument = gql`\n    query getCategoryList($skip: Int = 0, $after: String, $before: String, $first: Int = 10, $last: Int, $where: CategoryWhereInput, $orderBy: CategoryOrderByInput) {\n  categories(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    id\n    status\n    parent {\n      id\n      translations(where: {language: VI}) {\n        name\n      }\n    }\n    translations(where: {language: VI}) {\n      name\n    }\n  }\n  categoriesConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetCategoryListGQL extends Apollo.Query<GetCategoryListQuery, GetCategoryListQueryVariables> {\n    document = GetCategoryListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetHierarchicalCategoriesDocument = gql`\n    query getHierarchicalCategories {\n  categories(where: {parent: {id: null}}, first: 100) {\n    id\n    translations(where: {language: VI}) {\n      name\n    }\n    children {\n      id\n      translations(where: {language: VI}) {\n        name\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetHierarchicalCategoriesGQL extends Apollo.Query<GetHierarchicalCategoriesQuery, GetHierarchicalCategoriesQueryVariables> {\n    document = GetHierarchicalCategoriesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateCategoryDocument = gql`\n    mutation updateCategory($where: CategoryWhereUniqueInput!, $data: CategoryUpdateInput!) {\n  updateCategory(where: $where, data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateCategoryGQL extends Apollo.Mutation<UpdateCategoryMutation, UpdateCategoryMutationVariables> {\n    document = UpdateCategoryDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AwardEventCommentDocument = gql`\n    mutation awardEventComment($id: Int!) {\n  awardEventComment(where: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AwardEventCommentGQL extends Apollo.Mutation<AwardEventCommentMutation, AwardEventCommentMutationVariables> {\n    document = AwardEventCommentDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AwardEventCommentsDocument = gql`\n    mutation awardEventComments($data: EventCommentUpdateManyWithoutEventInput!) {\n  awardEventComments(data: $data)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AwardEventCommentsGQL extends Apollo.Mutation<AwardEventCommentsMutation, AwardEventCommentsMutationVariables> {\n    document = AwardEventCommentsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateEventNotificationDocument = gql`\n    mutation createEventNotification($data: EventNotificationCreateInput!) {\n  createEventNotification(data: $data) {\n    id\n    title\n    content\n    notifiedAt\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateEventNotificationGQL extends Apollo.Mutation<CreateEventNotificationMutation, CreateEventNotificationMutationVariables> {\n    document = CreateEventNotificationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateEventDocument = gql`\n    mutation createEvent($data: EventCreateInput!) {\n  createEvent(data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateEventGQL extends Apollo.Mutation<CreateEventMutation, CreateEventMutationVariables> {\n    document = CreateEventDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteEventNotificationDocument = gql`\n    mutation deleteEventNotification($where: EventNotificationWhereUniqueInput!) {\n  deleteEventNotification(where: $where) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteEventNotificationGQL extends Apollo.Mutation<DeleteEventNotificationMutation, DeleteEventNotificationMutationVariables> {\n    document = DeleteEventNotificationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteEventDocument = gql`\n    mutation deleteEvent($where: EventWhereUniqueInput!) {\n  deleteEvent(where: $where) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteEventGQL extends Apollo.Mutation<DeleteEventMutation, DeleteEventMutationVariables> {\n    document = DeleteEventDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetEventCommentsDocument = gql`\n    query getEventComments($skip: Int = 0, $after: String, $before: String, $first: Int = 10, $last: Int, $where: EventCommentWhereInput, $orderBy: EventCommentOrderByInput) {\n  eventComments(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    id\n    content\n    createdAt\n    status\n    user {\n      id\n      account\n      phoneNumber\n      address\n      gender\n      birthYear\n      avatar {\n        url\n        small: fixed(width: SMALL) {\n          url\n        }\n        medium: fixed(width: MEDIUM) {\n          url\n        }\n      }\n    }\n  }\n  eventCommentsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetEventCommentsGQL extends Apollo.Query<GetEventCommentsQuery, GetEventCommentsQueryVariables> {\n    document = GetEventCommentsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetEventDetailsDocument = gql`\n    query getEventDetails($where: EventWhereUniqueInput!) {\n  event(where: $where) {\n    id\n    name\n    condition\n    startedAt\n    endedAt\n    coverUrl\n    content\n    visible\n    type\n    reviewDeadline\n    numberOfWinners\n    minimumNumberOfReviews\n    reminderDates\n    points\n    eventToProducts {\n      product {\n        id\n        translations(where: {language: VI}) {\n          name\n          language\n        }\n      }\n      quantity\n    }\n    tags {\n      id\n      translations(where: {language: VI}) {\n        content\n        language\n      }\n    }\n    notifications {\n      id\n      title\n      content\n      notifiedAt\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetEventDetailsGQL extends Apollo.Query<GetEventDetailsQuery, GetEventDetailsQueryVariables> {\n    document = GetEventDetailsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetEventListDocument = gql`\n    query getEventList($skip: Int, $after: String, $before: String, $first: Int, $last: Int, $where: EventWhereInput, $orderBy: EventOrderByInput) {\n  events(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    id\n    name\n    startedAt\n    endedAt\n    coverUrl\n    type\n    commentsConnection {\n      aggregate {\n        count\n      }\n    }\n    currentNumberOfWinners\n    maximumNumberOfWinners\n    notifications {\n      id\n    }\n  }\n  eventsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetEventListGQL extends Apollo.Query<GetEventListQuery, GetEventListQueryVariables> {\n    document = GetEventListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ReclaimEventCommentDocument = gql`\n    mutation reclaimEventComment($id: Int!, $payback: Boolean!) {\n  reclaimEventComment(where: {id: $id}, payback: $payback) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ReclaimEventCommentGQL extends Apollo.Mutation<ReclaimEventCommentMutation, ReclaimEventCommentMutationVariables> {\n    document = ReclaimEventCommentDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateEventNotificationDocument = gql`\n    mutation updateEventNotification($where: EventNotificationWhereUniqueInput!, $data: EventNotificationUpdateInput!) {\n  updateEventNotification(where: $where, data: $data) {\n    id\n    title\n    content\n    notifiedAt\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateEventNotificationGQL extends Apollo.Mutation<UpdateEventNotificationMutation, UpdateEventNotificationMutationVariables> {\n    document = UpdateEventNotificationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateEventDocument = gql`\n    mutation updateEvent($where: EventWhereUniqueInput!, $data: EventUpdateInput!) {\n  updateEvent(where: $where, data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateEventGQL extends Apollo.Mutation<UpdateEventMutation, UpdateEventMutationVariables> {\n    document = UpdateEventDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AnalyzeIngredientsDocument = gql`\n    query analyzeIngredients($text: String!) {\n  analyzeIngredients(text: $text) {\n    ingredients {\n      id\n      translations {\n        name\n      }\n      ewg\n    }\n    total\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AnalyzeIngredientsGQL extends Apollo.Query<AnalyzeIngredientsQuery, AnalyzeIngredientsQueryVariables> {\n    document = AnalyzeIngredientsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateCautionDocument = gql`\n    mutation createCaution($data: CautionCreateInput!) {\n  createCaution(data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateCautionGQL extends Apollo.Mutation<CreateCautionMutation, CreateCautionMutationVariables> {\n    document = CreateCautionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateFunctionDocument = gql`\n    mutation createFunction($data: FunctionCreateInput!) {\n  createFunction(data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateFunctionGQL extends Apollo.Mutation<CreateFunctionMutation, CreateFunctionMutationVariables> {\n    document = CreateFunctionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateIngredientDocument = gql`\n    mutation createIngredient($data: IngredientCreateInput!) {\n  createIngredient(data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateIngredientGQL extends Apollo.Mutation<CreateIngredientMutation, CreateIngredientMutationVariables> {\n    document = CreateIngredientDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetCautionDetailsDocument = gql`\n    query getCautionDetails($where: CautionWhereUniqueInput!) {\n  caution(where: $where) {\n    ...CautionDetails\n  }\n}\n    ${CautionDetailsFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetCautionDetailsGQL extends Apollo.Query<GetCautionDetailsQuery, GetCautionDetailsQueryVariables> {\n    document = GetCautionDetailsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetCautionListDocument = gql`\n    query getCautionList($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: IngredientCautionWhereInput, $orderBy: BaseOrderByInput) {\n  cautions(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    id\n    translations {\n      id\n      name\n      description\n      language\n    }\n  }\n  cautionsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetCautionListGQL extends Apollo.Query<GetCautionListQuery, GetCautionListQueryVariables> {\n    document = GetCautionListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetFunctionDetailsDocument = gql`\n    query getFunctionDetails($where: FunctionWhereUniqueInput!) {\n  function(where: $where) {\n    ...FunctionDetails\n  }\n}\n    ${FunctionDetailsFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetFunctionDetailsGQL extends Apollo.Query<GetFunctionDetailsQuery, GetFunctionDetailsQueryVariables> {\n    document = GetFunctionDetailsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetFunctionListDocument = gql`\n    query getFunctionList($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: SpecialIngredientFunctionWhereInput, $orderBy: SpecialIngredientFunctionOrderByInput) {\n  functions(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    id\n    symbolUrl\n    type\n    translations(where: {language: VI}) {\n      id\n      name\n      description\n    }\n  }\n  functionsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetFunctionListGQL extends Apollo.Query<GetFunctionListQuery, GetFunctionListQueryVariables> {\n    document = GetFunctionListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetIngredientDetailsDocument = gql`\n    query getIngredientDetails($id: Int!) {\n  ingredient(where: {id: $id}) {\n    ...IngredientDetails\n  }\n}\n    ${IngredientDetailsFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetIngredientDetailsGQL extends Apollo.Query<GetIngredientDetailsQuery, GetIngredientDetailsQueryVariables> {\n    document = GetIngredientDetailsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetIngredientListDocument = gql`\n    query getIngredientList($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: IngredientWhereInput, $orderBy: IngredientOrderByInput) {\n  ingredients(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...IngredientCompactFields\n  }\n  ingredientsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ${IngredientCompactFieldsFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetIngredientListGQL extends Apollo.Query<GetIngredientListQuery, GetIngredientListQueryVariables> {\n    document = GetIngredientListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SearchCautionTranslationsDocument = gql`\n    query searchCautionTranslations($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: IngredientCautionTranslationWhereInput, $orderBy: BaseOrderByInput) {\n  cautionTranslations(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...SearchCautionTranslation\n  }\n}\n    ${SearchCautionTranslationFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SearchCautionTranslationsGQL extends Apollo.Query<SearchCautionTranslationsQuery, SearchCautionTranslationsQueryVariables> {\n    document = SearchCautionTranslationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SearchFunctionTranslationsDocument = gql`\n    query searchFunctionTranslations($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: SpecialIngredientFunctionTranslationWhereInput, $orderBy: BaseOrderByInput) {\n  functionTranslations(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...SearchFunctionTranslation\n  }\n}\n    ${SearchFunctionTranslationFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SearchFunctionTranslationsGQL extends Apollo.Query<SearchFunctionTranslationsQuery, SearchFunctionTranslationsQueryVariables> {\n    document = SearchFunctionTranslationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SearchIngredientTranslationsDocument = gql`\n    query searchIngredientTranslations($skip: Int = 0, $after: String, $before: String, $first: Int = 10, $last: Int, $where: IngredientTranslationWhereInput, $orderBy: IngredientTranslationOrderByInput) {\n  ingredientTranslations(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...SearchIngredientTranslation\n  }\n}\n    ${SearchIngredientTranslationFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SearchIngredientTranslationsGQL extends Apollo.Query<SearchIngredientTranslationsQuery, SearchIngredientTranslationsQueryVariables> {\n    document = SearchIngredientTranslationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateCautionDocument = gql`\n    mutation updateCaution($where: CautionWhereUniqueInput!, $data: CautionUpdateInput!) {\n  updateCaution(where: $where, data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateCautionGQL extends Apollo.Mutation<UpdateCautionMutation, UpdateCautionMutationVariables> {\n    document = UpdateCautionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateFunctionDocument = gql`\n    mutation updateFunction($where: FunctionWhereUniqueInput!, $data: FunctionUpdateInput!) {\n  updateFunction(where: $where, data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateFunctionGQL extends Apollo.Mutation<UpdateFunctionMutation, UpdateFunctionMutationVariables> {\n    document = UpdateFunctionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateIngredientDocument = gql`\n    mutation updateIngredient($where: IngredientWhereUniqueInput!, $data: IngredientUpdateInput!) {\n  updateIngredient(where: $where, data: $data) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateIngredientGQL extends Apollo.Mutation<UpdateIngredientMutation, UpdateIngredientMutationVariables> {\n    document = UpdateIngredientDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ApprovePostCommentReportDocument = gql`\n    mutation approvePostCommentReport($where: PostCommentReportWhereUniqueInput!) {\n  approvePostCommentReport(where: $where) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ApprovePostCommentReportGQL extends Apollo.Mutation<ApprovePostCommentReportMutation, ApprovePostCommentReportMutationVariables> {\n    document = ApprovePostCommentReportDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ApprovePostDocument = gql`\n    mutation approvePost($id: Int!) {\n  approvePost(where: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ApprovePostGQL extends Apollo.Mutation<ApprovePostMutation, ApprovePostMutationVariables> {\n    document = ApprovePostDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetPostCommentReportListDocument = gql`\n    query getPostCommentReportList($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: PostCommentReportWhereInput, $orderBy: PostCommentReportOrderByInput) {\n  postCommentReports(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...PostCommentReportField\n  }\n  postCommentReportsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ${PostCommentReportFieldFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetPostCommentReportListGQL extends Apollo.Query<GetPostCommentReportListQuery, GetPostCommentReportListQueryVariables> {\n    document = GetPostCommentReportListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetPostListDocument = gql`\n    query getPostList($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: PostWhereInput, $orderBy: [PostOrderByInput!]) {\n  posts(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...PostCard\n  }\n  postsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ${PostCardFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetPostListGQL extends Apollo.Query<GetPostListQuery, GetPostListQueryVariables> {\n    document = GetPostListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetVideoPostListDocument = gql`\n    query GetVideoPostList($where: PostWhereInput, $orderBy: [PostOrderByInput!], $skip: Int = 0, $after: String, $before: String, $first: Int = 12, $last: Int) {\n  posts(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...VideoCard\n  }\n  postsConnection(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n    ${VideoCardFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetVideoPostListGQL extends Apollo.Query<GetVideoPostListQuery, GetVideoPostListQueryVariables> {\n    document = GetVideoPostListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RejectPostCommentReportDocument = gql`\n    mutation rejectPostCommentReport($where: PostCommentReportWhereUniqueInput!) {\n  rejectPostCommentReport(where: $where) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RejectPostCommentReportGQL extends Apollo.Mutation<RejectPostCommentReportMutation, RejectPostCommentReportMutationVariables> {\n    document = RejectPostCommentReportDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RejectPostDocument = gql`\n    mutation rejectPost($id: Int!) {\n  rejectPost(where: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RejectPostGQL extends Apollo.Mutation<RejectPostMutation, RejectPostMutationVariables> {\n    document = RejectPostDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateProductDocument = gql`\n    mutation createProduct($data: ProductCreateInput!) {\n  createProduct(data: $data) {\n    uid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateProductGQL extends Apollo.Mutation<CreateProductMutation, CreateProductMutationVariables> {\n    document = CreateProductDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetProductDetailsDocument = gql`\n    query getProductDetails($where: ProductWhereUniqueInput!) {\n  product(where: $where) {\n    id\n    price\n    measure\n    videoUrl\n    videoTitle\n    status\n    translations(where: {language: VI}) {\n      id\n      name\n      description\n      imageDescription\n      slug\n    }\n    thumbnail {\n      id\n      url\n      small: fixed(width: SMALL) {\n        url\n      }\n      name\n      width\n      height\n    }\n    categories {\n      id\n      translations(where: {language: VI}) {\n        name\n      }\n    }\n    brand {\n      id\n      translations(where: {language: VI}) {\n        name\n      }\n    }\n    barcodes(first: 1000) {\n      id\n      value\n    }\n    attributes {\n      rdi\n      packagingUnit\n      netWeightPerPackage\n      weightUnit\n      netVolumePerPackage\n      volumeUnit\n      energyPerPackage\n      energyUnit\n    }\n    productToIngredients(first: 1000) {\n      attributes {\n        amount\n        amountUnit\n      }\n      ingredient {\n        id\n        translations {\n          name\n          language\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetProductDetailsGQL extends Apollo.Query<GetProductDetailsQuery, GetProductDetailsQueryVariables> {\n    document = GetProductDetailsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetProductListDocument = gql`\n    query getProductList($skip: Int = 0, $after: String, $before: String, $first: Int = 10, $last: Int, $where: ProductWhereInput, $orderBy: [ProductOrderByInput!]) {\n  products(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...ProductListFields\n  }\n  productsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ${ProductListFieldsFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetProductListGQL extends Apollo.Query<GetProductListQuery, GetProductListQueryVariables> {\n    document = GetProductListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetProductRequestsDocument = gql`\n    query getProductRequests($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: ProductRequestWhereInput, $orderBy: ProductRequestOrderByInput) {\n  productRequests(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...ProductRequestField\n  }\n  productRequestsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ${ProductRequestFieldFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetProductRequestsGQL extends Apollo.Query<GetProductRequestsQuery, GetProductRequestsQueryVariables> {\n    document = GetProductRequestsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SearchProductListDocument = gql`\n    query searchProductList($skip: Int = 0, $first: Int = 20, $text: String!) {\n  searchProducts(skip: $skip, first: $first, text: $text) {\n    products {\n      ...ProductListFields\n    }\n    total\n  }\n}\n    ${ProductListFieldsFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SearchProductListGQL extends Apollo.Query<SearchProductListQuery, SearchProductListQueryVariables> {\n    document = SearchProductListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SearchProductsDocument = gql`\n    query searchProducts($skip: Int = 0, $first: Int = 20, $text: String!) {\n  searchProducts(text: $text, first: $first, skip: $skip) {\n    total\n    products {\n      id\n      translations(where: {language: VI}) {\n        name\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SearchProductsGQL extends Apollo.Query<SearchProductsQuery, SearchProductsQueryVariables> {\n    document = SearchProductsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateProductRequestDocument = gql`\n    mutation updateProductRequest($data: ProductRequestUpdateInput!, $where: ProductRequestWhereUniqueInput!) {\n  updateProductRequest(data: $data, where: $where) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateProductRequestGQL extends Apollo.Mutation<UpdateProductRequestMutation, UpdateProductRequestMutationVariables> {\n    document = UpdateProductRequestDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateProductDocument = gql`\n    mutation updateProduct($where: ProductWhereUniqueInput!, $data: ProductUpdateInput!) {\n  updateProduct(where: $where, data: $data) {\n    uid\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateProductGQL extends Apollo.Mutation<UpdateProductMutation, UpdateProductMutationVariables> {\n    document = UpdateProductDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ApproveReviewReportDocument = gql`\n    mutation approveReviewReport($where: ReviewReportWhereUniqueInput!) {\n  approveReviewReport(where: $where) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ApproveReviewReportGQL extends Apollo.Mutation<ApproveReviewReportMutation, ApproveReviewReportMutationVariables> {\n    document = ApproveReviewReportDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ApproveReviewDocument = gql`\n    mutation approveReview($where: ReviewWhereUniqueInput!) {\n  approveReview(where: $where) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ApproveReviewGQL extends Apollo.Mutation<ApproveReviewMutation, ApproveReviewMutationVariables> {\n    document = ApproveReviewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetReportsOfReviewDocument = gql`\n    query getReportsOfReview($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: ReviewReportWhereInput, $orderBy: ReviewReportOrderByInput) {\n  reviewReports(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...ReviewReportListFields\n  }\n}\n    ${ReviewReportListFieldsFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetReportsOfReviewGQL extends Apollo.Query<GetReportsOfReviewQuery, GetReportsOfReviewQueryVariables> {\n    document = GetReportsOfReviewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetReviewListDocument = gql`\n    query getReviewList($skip: Int = 0, $after: String, $before: String, $first: Int = 10, $last: Int, $where: ReviewWhereInput, $orderBy: ReviewOrderByInput) {\n  reviews(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...ReviewListFields\n  }\n  reviewsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ${ReviewListFieldsFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetReviewListGQL extends Apollo.Query<GetReviewListQuery, GetReviewListQueryVariables> {\n    document = GetReviewListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetReviewReportListDocument = gql`\n    query getReviewReportList($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: ReviewReportWhereInput, $orderBy: ReviewReportOrderByInput) {\n  reviewReports(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    ...ReportListFieldsWithReview\n  }\n  reviewReportsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ${ReportListFieldsWithReviewFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetReviewReportListGQL extends Apollo.Query<GetReviewReportListQuery, GetReviewReportListQueryVariables> {\n    document = GetReviewReportListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RejectReviewReportDocument = gql`\n    mutation rejectReviewReport($where: ReviewReportWhereUniqueInput!) {\n  rejectReviewReport(where: $where) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RejectReviewReportGQL extends Apollo.Mutation<RejectReviewReportMutation, RejectReviewReportMutationVariables> {\n    document = RejectReviewReportDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RejectReviewDocument = gql`\n    mutation rejectReview($where: ReviewWhereUniqueInput!) {\n  rejectReview(where: $where) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RejectReviewGQL extends Apollo.Mutation<RejectReviewMutation, RejectReviewMutationVariables> {\n    document = RejectReviewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ApproveShopDocument = gql`\n    mutation approveShop($where: ShopWhereUniqueInput!) {\n  approveShop(where: $where) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ApproveShopGQL extends Apollo.Mutation<ApproveShopMutation, ApproveShopMutationVariables> {\n    document = ApproveShopDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const BlockShopDocument = gql`\n    mutation blockShop($where: ShopWhereUniqueInput!, $reason: String!) {\n  blockShop(where: $where, reason: $reason) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class BlockShopGQL extends Apollo.Mutation<BlockShopMutation, BlockShopMutationVariables> {\n    document = BlockShopDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetShopDetailsDocument = gql`\n    query getShopDetails($id: Int!) {\n  shop(where: {id: $id}) {\n    id\n    name\n    description\n    status\n    createdAt\n    updatedAt\n    pickupAddress {\n      address\n      ward\n      district\n      province\n      country\n    }\n    user {\n      id\n      account\n      avatar {\n        small: fixed(width: SMALL) {\n          url\n        }\n        url\n      }\n      email\n    }\n    cover {\n      id\n      medium: fixed(width: MEDIUM) {\n        url\n      }\n      url\n    }\n    externalLinks {\n      title\n      url\n      image {\n        url\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetShopDetailsGQL extends Apollo.Query<GetShopDetailsQuery, GetShopDetailsQueryVariables> {\n    document = GetShopDetailsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetShopListDocument = gql`\n    query getShopList($skip: Int = 0, $after: String, $before: String, $first: Int = 10, $last: Int, $where: ShopWhereInput, $orderBy: ShopOrderByInput, $orderBys: [ShopOrderByInput!]) {\n  shops(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n    orderBys: $orderBys\n  ) {\n    id\n    name\n    status\n    user {\n      id\n      avatar {\n        fixed(width: SMALL) {\n          url\n        }\n        url\n      }\n      email\n      isOfficial\n      type\n    }\n    createdAt\n  }\n  shopsConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n    orderBys: $orderBys\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetShopListGQL extends Apollo.Query<GetShopListQuery, GetShopListQueryVariables> {\n    document = GetShopListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UploadShopToProductsDocument = gql`\n    mutation uploadShopToProducts($data: [ShopToProductCreateInput!]!) {\n  uploadShopToProducts(data: $data) {\n    price\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UploadShopToProductsGQL extends Apollo.Mutation<UploadShopToProductsMutation, UploadShopToProductsMutationVariables> {\n    document = UploadShopToProductsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SearchTagTranslationsDocument = gql`\n    query searchTagTranslations($skip: Int, $after: String, $before: String, $first: Int, $last: Int, $where: TagTranslationWhereInput, $orderBy: TagTranslationOrderByInput) {\n  tagTranslations(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    id\n    content\n    tag {\n      id\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SearchTagTranslationsGQL extends Apollo.Query<SearchTagTranslationsQuery, SearchTagTranslationsQueryVariables> {\n    document = SearchTagTranslationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetUserDetailsDocument = gql`\n    query getUserDetails($id: Int!) {\n  user(where: {id: $id}) {\n    id\n    email\n    account\n    gender\n    birthYear\n    baumannSkinType\n    isOfficial\n    isBlocked\n    avatar {\n      url\n      fixed(width: SMALL) {\n        url\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetUserDetailsGQL extends Apollo.Query<GetUserDetailsQuery, GetUserDetailsQueryVariables> {\n    document = GetUserDetailsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetUserListDocument = gql`\n    query getUserList($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: UserWhereInput, $orderBy: UserOrderByInput) {\n  users(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n    orderBy: $orderBy\n  ) {\n    id\n    account\n    email\n    isOfficial\n    createdAt\n    isBlocked\n    avatar {\n      url\n      fixed(width: SMALL) {\n        url\n      }\n    }\n  }\n  usersConnection(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetUserListGQL extends Apollo.Query<GetUserListQuery, GetUserListQueryVariables> {\n    document = GetUserListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const BlockUserDocument = gql`\n    mutation blockUser($where: UserWhereUniqueInput!, $isBlocked: Boolean!) {\n  blockUser(where: $where, isBlocked: $isBlocked) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class BlockUserGQL extends Apollo.Mutation<BlockUserMutation, BlockUserMutationVariables> {\n    document = BlockUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpgradeUserDocument = gql`\n    mutation upgradeUser($where: UserWhereUniqueInput!, $isOfficial: Boolean!) {\n  upgradeUser(where: $where, isOfficial: $isOfficial) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpgradeUserGQL extends Apollo.Mutation<UpgradeUserMutation, UpgradeUserMutationVariables> {\n    document = UpgradeUserDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SearchUsersDocument = gql`\n    query searchUsers($skip: Int = 0, $after: String, $before: String, $first: Int, $last: Int, $where: UserWhereInput) {\n  users(\n    skip: $skip\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n    where: $where\n  ) {\n    ...MentionUserFields\n  }\n}\n    ${MentionUserFieldsFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SearchUsersGQL extends Apollo.Query<SearchUsersQuery, SearchUsersQueryVariables> {\n    document = SearchUsersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment.prod';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///"}